부등호 성공 

문제
두 종류의 부등호 기호 ‘<’와 ‘>’가 k개 나열된 순서열  A가 있다. 
우리는 이 부등호 기호 앞뒤에 서로 다른 한 자릿수 숫자를 넣어서 모든 부등호 관계를 만족시키려고 한다. 
예를 들어, 제시된 부등호 순서열 A가 다음과 같다고 하자. 

  A =>  < < < > < < > < >

부등호 기호 앞뒤에 넣을 수 있는 숫자는 0부터 9까지의 정수이며 선택된 숫자는 모두 달라야 한다. 
아래는 부등호 순서열 A를 만족시키는 한 예이다. 

  3 < 4 < 5 < 6 > 1 < 2 < 8 > 7 < 9 > 0

이 상황에서 부등호 기호를 제거한 뒤, 숫자를 모두 붙이면 하나의 수를 만들 수 있는데 이 수를 주어진 부등호 관계를 만족시키는 정수라고 한다. 
그런데 주어진 부등호 관계를 만족하는 정수는 하나 이상 존재한다. 예를 들어 3456128790 뿐만 아니라 5689023174도 아래와 같이 부등호 관계 A를 만족시킨다. 

   5 < 6 < 8 < 9 > 0 < 2 < 3 > 1 < 7 > 4

여러분은 제시된 k개의 부등호 순서를 만족하는 (k+1)자리의 정수 중에서 최대값과 최소값을 찾아야 한다. 
앞서 설명한 대로 각 부등호의 앞뒤에 들어가는 숫자는 { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }중에서 선택해야 하며 선택된 숫자는 모두 달라야 한다. 

입력
첫 줄에 부등호 문자의 개수를 나타내는 정수 k가 주어진다. 
그 다음 줄에는 k개의 부등호 기호가 하나의 공백을 두고 한 줄에 모두 제시된다. k의 범위는 2<=k<=9 이다. 

출력
여러분은 제시된 부등호 관계를 만족하는 k+1 자리의 최대, 최소 정수를 첫째 줄과 둘째 줄에 각각 출력해야 한다. 
단 아래 예(1)과 같이 첫 자리가 0인 경우도 정수에 포함되어야 한다. 
모든 입력에 답은 항상 존재하며 출력 정수는 하나의 문자열이 되도록 해야 한다. 

예제 입력 1  복사
2
< > 
예제 출력 1  복사
897
021

PS:
	* 위상정렬을 사용해서 풀이
	* N번 위치가 몇번째에 입력이 되는지를 기록해둔다.
	* EX) 9
		  < < < > < < > < >
			
		  0  1  2  3  4  5  6  7  8  9
		  6  7  8  9  3  4  5  1  2  0
		  
		 
package SortingAlgorithm;

import java.io.*;
import java.util.*;

public class Main {

    static StringBuilder sb;
    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    static int N, M;

    static ArrayList<Integer>[] DAG = new ArrayList[12];


    public static void main(String args[]) throws Exception {

        br = new BufferedReader(new InputStreamReader(System.in));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));
        sb = new StringBuilder();

        N = Integer.parseInt(br.readLine());

        int[] inDgree = new int[12], inDgree2 = new int[12];

        for (int i = 0; i <= N; ++i)
            DAG[i] = new ArrayList<>();

        st = new StringTokenizer(br.readLine());
        for (int i = 0; i < N; ++i) {
            char comp = st.nextToken().charAt(0);

            if (comp == '<') {
                inDgree2[i + 1]++;
                inDgree[i + 1]++;
                DAG[i].add(i + 1);
            } else {
                inDgree2[i]++;
                inDgree[i]++;
                DAG[i + 1].add(i);
            }
        }

        PriorityQueue<Integer> pq1 = new PriorityQueue<>();
        PriorityQueue<Integer> pq2 = new PriorityQueue<>(new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                return o1 < o2 ? 1 : o1 == o2 ? 0 : -1;
            }
        });

        for (int i = 0; i <= N; ++i) {
            if (inDgree[i] == 0) {
                pq1.add(i);
                pq2.add(i);
            }
        }

        int[] big = topologySort(pq2, inDgree2);
        int[] small = topologySort(pq1, inDgree);

        for(int i = 0; i <= N; ++i)
            bw.write((10 - M + big[i]) + "");
        bw.write("\n");
        for(int i = 0; i <= N; ++i)
            bw.write(small[i] + "");
        bw.flush();
    }


    public static int[] topologySort(PriorityQueue<Integer> pq, int[] degree) throws IOException{

        int val = 0;
        int[] temp = new int[N + 1];

        for (int i = 0; i <= N; ++i) {

            int cur = pq.poll();

            temp[cur] = val++;

            int len = DAG[cur].size();

            for (int j = 0; j < len; ++j) {
                if (--degree[DAG[cur].get(j)] == 0) {
                    pq.add(DAG[cur].get(j));
                }
            }
        }
        M = val;
        return temp;
    }
}

