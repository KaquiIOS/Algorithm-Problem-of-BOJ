LCS 성공 

문제
LCS(Longest Common Subsequence, 최장 공통 부분 수열)문제는 두 수열이 주어졌을 때, 모두의 부분 수열이 되는 수열 중 가장 긴 것을 찾는 문제이다.

예를 들어, ACAYKP와 CAPCAK의 LCS는 ACAK가 된다.

입력
첫째 줄과 둘째 줄에 두 문자열이 주어진다. 문자열은 알파벳 대문자로만 이루어져 있으며, 최대 1000글자로 이루어져 있다.

출력
첫째 줄에 입력으로 주어진 두 문자열의 LCS의 길이를 출력한다.

예제 입력 1  복사
ACAYKP
CAPCAK
예제 출력 1  복사
4



PS:
	* 크 ~ 혼자 생각해서 푸니까 너무 좋잖아 ~ 시간이 좀 많이 걸린건 비밀
	* DP[N][M] = 문자열1.substr(0, n) 과 문자열2.substr(0, m) 의 LCS
	* 메모이제이션을 통해 문자열1, 문자열2의 LCS를 저장한다.
	* 반복문을통해 문자열1, 문자열2의 LCS를 계산한다.
	* 예제를 통해 부분문제를 해결하는지 확인하겠다.
	
	EX)
	
	String1 = ACAYKP
	String2 = CAPCAK
	
	먼저 가장 작은 문제를 살펴보겠다. 바로 두 문자열의 첫번째 문자까지만 비교한다.
	A와 C는 다른 문자이니 LCS = 0이 된다.
	
		A
	C	0
	
	두번째 작은 문제를 살펴보면 1번 문자열 2번쨰 자리까지와 2번 문자열 1번 자리까지의 LCS를 구한다.
	String1[2] == String1[1] 이므로 LCS = 1이 된다.
	
		A	C
	C   0   1
	
	세번째 작은 문제를 살펴보면 1번 문자열 3번째 자리까지와 2번 문자열 1번 자리까지의 LCS를 구한다.
	A와 C는 다르기에 이전까지의 LCS를 그대로 사용한다.
	
	
		A	C	A
	C   0   1   1
	
	계속 반복...하다가 잠깐 멈춰보면
	
		A	C	A	Y	K	P
		
	C	0	1	1	1	1	1
	
	A	1	1	2
	

	CA와 ACA의 LCS는 2가 된다. 비교하는 문자가 같으면 이전의 최장 LCS에 1(맨 뒷글자 - 글자를 비교해서 똑같았으면 LCS 길이가 1 증가한다.)
	이전의 최장 LCS는 DP[N-1][M-1]이 된다. 왜냐 ! C 랑 AC 맨 뒤에 A를 붙인게 DP[N][M]이기 때문에 그렇다.
	
	만약 글자가 같지않다면 이전의 LCS중 큰 값을 가져온다. DP[N-1][M]과 DP[N][M-1] 중 큰 걸 가져오면 된다.
	왜냐 ! 지금 비교하는 문자끼리 서로 다르기 때문에 이전의 가장 큰 값이 현재의 LCS가 된다. CA랑 AC랑 비교할 때 C랑 AC, CA랑 A 비교한 것 중 큰 값을 가져오면 된다.
	
	뭔가 설명이 이상한데.. 막상 해보면 이해가 될 것이다. 배열을 그려보면 된다.
	
	다 그려보면 아래와 같다. (왼쪽, 위쪽의 0 들은 예외처리를 피하기위해서 추가해뒀다)
	
			 A	  C    A    Y    K    P
		0    0    0    0    0    0    0
	C	0    0    1    1    1    1    1
	A	0    1    1    1    2    2    2
	P	0    1    2    2    2    3    3
	C	0    1    2    2    2    3    3
	A	0    1    2    2    2    3    4
	K	0    1    2    3    3    3    4
	
	
	
package SortingAlgorithm;

import java.io.*;
import java.util.*;

public class Main {

    static int[][] dp;

    public static void main(String args[]) throws Exception {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        String s1 = br.readLine();
        String s2 = br.readLine();

        int n = s1.length();
        int m = s2.length();

        dp = new int[m+1][n+1];

        for(int i = 1; i <= m; ++i) {
            for(int j = 1; j <= n; ++j) {
                if(s2.charAt(i-1) == s1.charAt(j-1))
                    dp[i][j] = Math.max(dp[i][j], dp[i-1][j-1] + 1);
                else
                    dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);
            }
        }

/*

        for(int i = 0; i <= m; ++i) {
            for(int j = 0; j <= n; ++j) {
                System.out.format("%5d", dp[i][j]);
            }
            System.out.println();
        }
*/

        System.out.println(dp[m][n]);
    }
}


	
	
	