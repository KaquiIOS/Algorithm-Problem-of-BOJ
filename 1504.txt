특정한 최단 경로 성공 
시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
1 초	128 MB	9830	2413	1532	22.158%
문제
방향성이 없는 그래프가 주어진다. 세준이는 1번 정점에서 N번 정점으로 최단 거리로 이동하려고 한다. 
또한 세준이는 두 가지 조건을 만족하면서 이동하는 특정한 최단 경로를 구하고 싶은데, 그것은 바로 임의로 주어진 두 정점은 반드시 통과해야 한다는 것이다.

세준이는 한번 이동했던 정점은 물론, 한번 이동했던 간선도 다시 이동할 수 있다. 하지만 반드시 최단 경로로 이동해야 한다는 사실에 주의하라.
1번 정점에서 N번 정점으로 이동할 때, 주어진 두 정점을 반드시 거치면서 최단 경로로 이동하는 프로그램을 작성하시오.

입력
첫째 줄에 정점의 개수 N과 간선의 개수 E가 주어진다. (2<=N<=800, 0<=E<=200,000) 
둘째 줄부터 E개의 줄에 걸쳐서 세 개의 정수 a, b, c가 주어지는데, a번 정점에서 b번 정점까지 양방향 길이 존재하며, 그 거리가 c라는 뜻이다. (1<=c<=1,000) 
다음 줄에는 반드시 거쳐야 하는 두 개의 서로 다른 정점 번호가 주어진다.

출력
첫째 줄에 두 개의 정점을 지나는 최단 경로의 길이를 출력한다. 그러한 경로가 없을 때에는 -1을 출력한다.

예제 입력 1  복사
4 6
1 2 3
2 3 3
3 4 1
1 3 5
2 4 5
1 4 4
2 3
예제 출력 1  복사
7


PS;
	* 다익스트라 알고리즘을 이용하여 각각의 경로를 계산한다.
	* 양방향 그래프라는 점을 잘 이용해야한다.
	* 문제에서 두 점을 무조건 지나면서 최단 경로를 유지해야한다는 조건이 있다.
		- 두가지 경로를 생각해볼 수 있다.
			1. 1 -> A -> B -> V
			2. 1 -> B -> A -> V
			
		Dijkstra(1번 노드) 를 통해 1->A, 1->B의 최단경로를 알 수 있다.
		Dijkstra(V번 노드) 를 통해 B->V, A->V의 최단경로를 알 수 있다. (A->V == V->A, B->V == V->B)
		Dijkstra(A번 혹은 B번 노드) 를 통해 A->B, B->A의 최단 경로를 알 수 있다.
		
		이 과정을 통해 각 경로를 더해서 최솟값을 출력하면 된다.
		
import java.io.*;
import java.util.*;

public class Main {

    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    static class Edge implements Comparable<Edge> {
        int next;
        int cost;

        public Edge(int next, int cost) {
            this.next = next;
            this.cost = cost;
        }

        @Override
        public int compareTo(Edge o) {
            return cost > o.cost ? 1 : cost == o.cost ? 0 : -1;
        }
    }

    // 시작 지점에서 다른 노드까지 가는데 드는 최소 비용 및 경로
    // 0 : cost
    // 1 : previous node
    static long[] dist = new long[20001];

    // 각 정점에서 연결된 지역 리스트
    static ArrayList<Edge>[] adlist = new ArrayList[20001];
    static int V, E;
    static final int INF = 1987654321;

    public static void main(String args[]) throws Exception {

        br = new BufferedReader(new InputStreamReader(System.in));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        st = new StringTokenizer(br.readLine());
        // 정점의 수, 간선의 수
        V = Integer.parseInt(st.nextToken());
        E = Integer.parseInt(st.nextToken());

        for (int i = 0; i <= V; ++i)
            adlist[i] = new ArrayList<>();

        // 간선 입력(방향 그래프)
        for (int i = 0; i < E; ++i) {
            st = new StringTokenizer(br.readLine());
            // 간선 정보
            int s = Integer.parseInt(st.nextToken());
            int e = Integer.parseInt(st.nextToken());
            int cost = Integer.parseInt(st.nextToken());
            // 간선 정보 저장
            adlist[s].add(new Edge(e, cost));
            adlist[e].add(new Edge(s, cost));
        }

        st = new StringTokenizer(br.readLine());
        // 시작 노드
        int interA = Integer.parseInt(st.nextToken());
        int interB = Integer.parseInt(st.nextToken());

        long[][] result = new long[3][2];

        // 거리 배열 INF로 초기화
        Arrays.fill(dist, INF);
        dijkstra(1);

        // 1 -> A, 1 -> B
        result[0][0] = dist[interA];
        result[0][1] = dist[interB];

        Arrays.fill(dist, INF);
        dijkstra(interA);

        // A -> B, B -> A 동일한 경로임
        result[1][0] = dist[interB];
        result[1][1] = result[1][0];

        // 거리 배열 INF로 초기화
        Arrays.fill(dist, INF);
        dijkstra(V);

        // V -> A == A -> V
        result[2][0] = dist[interA];
        // V -> B == B -> V
        result[2][1] = dist[interB];


        // 1 -> A -> B -> V
        long ans1 = result[0][0] + result[1][0] + result[2][1];
        // 1 -> B -> A -> V
        long ans2 = result[0][1] + result[1][1] + result[2][0];

        if(result[0][0] == INF || result[1][0] == INF || result[2][1] == INF)
            ans1 = -1;
        if(result[0][1] == INF || result[1][0] == INF || result[2][1] == INF)
            ans2 = -1;

        long ans3 = 0;

        if(ans1 == -1 && ans2 == -1)
            ans3 = -1;
        else if(ans1 == -1 && ans2 != -1)
            ans3 = ans2;
        else if(ans1 != -1 && ans2 == -1)
            ans3 = ans1;
        else
            ans3 = (ans1 < ans2) ? ans1 : ans2;

        bw.write(ans3 + "\n");
        bw.flush();

    }

    public static void dijkstra(int start) {

        // 최소 비용 간선 선택을 빠르게
        PriorityQueue<Edge> pq = new PriorityQueue<>();

        // 시작 지점 설정
        dist[start] = 0;

        pq.add(new Edge(start, 0));

        while (!pq.isEmpty()) {
            // 선택된 간선
            Edge e = pq.poll();

            // 이전 노드의 도착지점
            int curPos = e.next;
            // 이전 노드에서 지금 노드까지의 비용
            int cost = e.cost;

            // 이전까지 기록했던 최단거리보다
            // 이전 노드에서 현재 노드까지 오는 비용이 더 크면 pass
            if (dist[curPos] < cost) continue;

            int len = adlist[curPos].size();

            for (int i = 0; i < len; ++i) {
                // 선택된 노드의 인접 노드
                int next = adlist[curPos].get(i).next;
                // 현재까지의 경로 비용 + 현재 위치 -> 다음 위치까지 가는 경로의 비용
                int nextDistance = cost + adlist[curPos].get(i).cost;
                // 이전까지의 비용과 현재 갱신된 비용을 비교
                if (nextDistance < dist[next]) {
                    // 갱신된 값이 더 작다면 갱신
                    dist[next] = nextDistance;
                    pq.add(new Edge(next, nextDistance));
                }
            }
        }
    }
}
		
		