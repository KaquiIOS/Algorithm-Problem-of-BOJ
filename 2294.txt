동전 2 성공 

문제
n가지 종류의 동전이 있다. 각각의 동전이 나타내는 가치는 다르다. 
이 동전들을 적당히 사용해서, 그 가치의 합이 k원이 되도록 하고 싶다. 
그러면서 동전의 개수가 최소가 되도록 하려고 한다. (각각의 동전은 몇개라도 사용할 수 있다.)

입력
첫째줄에 n, k가 주어진다. (1 ≤ n ≤ 100, 1 ≤ k ≤ 10,000) 다음 n개의 줄에는 각각의 동전의 가치가 주어진다. 동전의 가치는 100,000보다 작거나 같은 자연수이다.

출력
첫째줄에 사용한 동전의 최소 개수를 출력한다. 불가능한 경우에는 -1을 출력한다.

예제 입력 1  복사
3 15
1
5
12
예제 출력 1  복사
3



PS:
	* 메모이제이션을 통해 N 원을 만들 때 사용하는 동전의 최소 개수를 저장한다.
	* 반복문을 통해 N 원을 만들 때 사용하는 동전의 최소 개수를 저장한다.
	* 동전을 가장 많이 쓰는 경우를 생각해보면 1원으로 10000원을 만드는 경우이다. 따라서 MAX = 10000 이지만 만들지 못하는 경우를 나타내기위해 MAX = 10001로 설정한다.
	* 각 N 원을 만들 때 동전을 가장 적게 사용하는 경우를 찾기위해 반복문을 사용한다. 현재값 N원은 N - COINS[T] 원에서 COINS[T]원을 더해서 만들어진 값이다.
	  그러므로 N - COINS[T] 원 중 가장 작은 값에 COINS[T]원 동전을 하나 사용한 경우가 N원을 만들 때 동전이 작게드는 경우이다.
	* 이를 각 N에 대해서 수행하면 각 N원을 만들 때 드는 최소 동전의 수를 알 수 있다.
	
점화식:
	DP[N] = min(DP[N], DP[N-COINS[T]] + 1)  if( N - COINS[T] < 0 ) continue
	

import java.io.*;
import java.util.*;

public class Main {

    final static int MAX = 10001;
    static int[] dp, coins;
    static int N, K;

    public static void main(String args[]) throws Exception {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        StringTokenizer st = new StringTokenizer(br.readLine());

        N = Integer.parseInt(st.nextToken());
        K = Integer.parseInt(st.nextToken());

        dp = new int[K + 1];
        coins = new int[N];

        for(int i = 0; i < N; ++i)
            coins[i] = Integer.parseInt(br.readLine());

        Arrays.fill(dp, MAX);

        dp[0] = 0;

        for(int i = 1; i <= K; ++i) {
            for(int j = 0; j < N; ++j) {
                if(i - coins[j] < 0 ) continue;
                dp[i] = Math.min(dp[i], dp[i-coins[j]] + 1);
            }
        }

/*
        for(int i = 0; i <= K; ++i)
            bw.write(i + " : " + dp[i] + "\n");
        bw.flush();
*/

        bw.write((dp[K] == MAX ? -1 : dp[K]) + "\n");
        bw.flush();
    }
}


