DFS와 BFS 성공 

문제
그래프를 DFS로 탐색한 결과와 BFS로 탐색한 결과를 출력하는 프로그램을 작성하시오. 
단, 방문할 수 있는 정점이 여러 개인 경우에는 정점 번호가 작은 것을 먼저 방문하고, 더 이상 방문할 수 있는 점이 없는 경우 종료한다. 정점 번호는 1번부터 N번까지이다.

입력
첫째 줄에 정점의 개수 N(1 ≤ N ≤ 1,000), 간선의 개수 M(1 ≤ M ≤ 10,000), 탐색을 시작할 정점의 번호 V가 주어진다. 
다음 M개의 줄에는 간선이 연결하는 두 정점의 번호가 주어진다. 
한 간선이 여러 번 주어질 수도 있는데, 간선이 하나만 있는 것으로 생각하면 된다. 입력으로 주어지는 간선은 양방향이다.

출력
첫째 줄에 DFS를 수행한 결과를, 그 다음 줄에는 BFS를 수행한 결과를 출력한다. V부터 방문된 점을 순서대로 출력하면 된다.

예제 입력 1  복사
4 5 1
1 2
1 3
1 4
2 4
3 4
예제 출력 1  복사
1 2 4 3
1 2 3 4


PS:
	* 그래프의 가장 기본인 DFS, BFS를 구현하는 문제.
	* 번호가 낮은 정점을 우선 방문하는게 중요.
	* 그래프를 ArrayList로 만들어서 다 입력을 받은 후 정렬하는 과정이 필요.
	* visit 배열을 통해 재방문 방지
	
	
	
import java.io.*;
import java.util.*;

public class Main {

    static int N, E, S;
    static ArrayList<Integer>[] g = new ArrayList[1001];
    static boolean[] isVisited = new boolean[1001];
    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    public static void main(String args[]) throws Exception {

        br = new BufferedReader(new InputStreamReader(System.in));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        st = new StringTokenizer(br.readLine());

        N = Integer.parseInt(st.nextToken());
        E = Integer.parseInt(st.nextToken());
        S = Integer.parseInt(st.nextToken());

        for (int i = 0; i <= N; ++i)
            g[i] = new ArrayList<>();

        for (int i = 0; i < E; ++i) {
            st = new StringTokenizer(br.readLine());
            int s = Integer.parseInt(st.nextToken());
            int e = Integer.parseInt(st.nextToken());

            g[s].add(e);
            g[e].add(s);
        }

        for(int i = 0; i <= N; ++i) {
            g[i].sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer o2) {
                    return o1 > o2 ? 1 : o1 == o2 ? 0 : -1;
                }
            });
        }

        DFS(S);
        bw.write("\n");
        bw.flush();

        Arrays.fill(isVisited, false);

        BFS();
    }


    public static void DFS(int s) throws IOException {

        isVisited[s] = true;
        bw.write(s + " ");

        Iterator<Integer> it = g[s].iterator();

        while(it.hasNext()) {
            int next = it.next();
            if(isVisited[next]) continue;
            DFS(next);
        }
    }

    public static void BFS() throws IOException {

        Queue<Integer> q = new ArrayDeque<>();

        q.add(S);
        isVisited[S] = true;

        while (!q.isEmpty()) {

            int cur = q.poll();

            bw.write(cur + " ");

            Iterator<Integer> it = g[cur].iterator();

            while (it.hasNext()) {
                int next = it.next();
                if (isVisited[next]) continue;
                q.add(next);
                isVisited[next] = true;
            }
        }
        bw.flush();
    }
}