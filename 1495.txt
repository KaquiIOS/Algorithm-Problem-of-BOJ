기타리스트 성공 

문제
Day Of Mourning의 기타리스트 강토는 다가오는 공연에서 연주할 N개의 곡을 연주하고 있다. 
지금까지 공연과는 다른 공연을 보여주기 위해서 이번 공연에서는 매번 곡이 시작하기 전에 볼륨을 바꾸고 연주하려고 한다.

먼저, 공연이 시작하기 전에 각각의 곡이 시작하기 전에 바꿀 수 있는 볼륨의 리스트를 만들었다. 
이 리스트를 V라고 했을 때, V[i]는 i번째 곡을 연주하기 전에 바꿀 수 있는 볼륨을 의미한다. 
항상 리스트에 적힌 차이로만 볼륨을 바꿀 수 있다. 
즉, 현재 볼륨이 P이고 지금 i번째 곡을 연주하기 전이라면, i번 곡은 P+V[i]나 P-V[i] 로 연주해야 한다. 
하지만, 0보다 작은 값으로 볼륨을 바꾸거나, M보다 큰 값으로 볼륨을 바꿀 수 없다.

곡의 개수 N과 시작 볼륨 S, 그리고 M이 주어졌을 때, 마지막 곡을 연주할 수 있는 볼륨 중 최대값을 구하는 프로그램을 작성하시오. 모든 곡은 리스트에 적힌 순서대로 연주해야 한다.

입력
첫째 줄에 곡의 개수 N, 시작 볼륨 S, M이 주어진다. (1 ≤ N ≤ 100, 1 ≤ M ≤ 1000, 0 ≤ S ≤ M) 
둘째 줄에는 각 곡이 시작하기 전에 줄 수 있는 볼륨의 차이가 주어진다. 이 값은 1보다 크거나 같고, M보다 작거나 같다.

출력
첫째 줄에 가능한 마지막 곡의 볼륨 중 최대값을 출력한다. 만약 마지막 곡을 연주할 수 없다면 (중간에 볼륨 조절을 할 수 없다면) -1을 출력한다.

예제 입력 1  복사
3 5 10
5 3 7
예제 출력 1  복사
10


PS:
	* 점화식은 맞았지만 구현하는 과정이 잘못되었다. (시간초과)
	* 그 이유를 생각해보니 굳이 볼륨의 최댓값을 DP[N][M]이 가지고 있을 필요가 없었다.
	  생각해보면 마지막 곡까지 도착하면 그 값과 이전의 볼륨과 비교해서 크면 갱신, 작으면 그대로 두면 되는 문제다.
	* 그래서 DP배열을 int로 할 필요가 없다. 단지 k번 곡을 할 때 m 볼륨을 사용했는지 안했는지만 표시하면 된다. 그래서 불리언 타입으로 dp배열 선언
	* 현재 볼륨(true 표시)에서 곡 볼륨을 더하고 빼서 만약 범위를 벗어나면 무시하고 범위에 포함되면 볼륨을 변경하고 다음 곡을 확인한다.
	
점화식:
	dp[n][m] = true;
	rec(n+1, m + volume[n]) if(m + volume[n] 범위에 포함)
	rec(n+1, m - volume[n]) if(m - volume[n] 범위에 포함)
	
import java.io.*;
import java.util.*;

public class Main {

    static boolean[][] dp;
    static int[] volume;
    static int N, M, maxVal = -1;

    static BufferedReader br = null;
    static BufferedWriter bw = null;
    static StringTokenizer st = null;

    public static void main(String args[]) throws Exception {

        br = new BufferedReader(new InputStreamReader(System.in));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        st = new StringTokenizer(br.readLine());

        N = Integer.parseInt(st.nextToken());
        int S = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());

        dp = new boolean[N][M + 1];
        volume = new int[N];

        st = new StringTokenizer(br.readLine());

        for (int i = 0; i < N; ++i) {
            volume[i] = Integer.parseInt(st.nextToken());
        }

        rec(1, S + volume[0]); rec(1, S - volume[0]);

        bw.write(maxVal + "\n");
        bw.flush();
    }

    public static void rec(int n, int v) {

        if (v < 0 || M < v) return;
        if (n == N) {
            maxVal = (maxVal > v) ? maxVal : v;
            return;
        }
        if (dp[n][v]) return;

        dp[n][v] = true;

        rec(n + 1, v + volume[n]);
        rec(n + 1, v - volume[n]);
    }
}