여행 가자 성공 
시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
2 초	128 MB	2006	781	587	38.492%
문제
동혁이는 친구들과 함께 여행을 가려고 한다. 한국에는 도시가 N개 있고 임의의 두 도시 사이에 길이 있을 수도, 없을 수도 있다. 
동혁이의 여행 일정이 주어졌을 때, 이 여행 경로가 가능한 것인지 알아보자. 물론 중간에 다른 도시를 경유해서 여행을 할 수도 있다. 
예를 들어 도시가 5개 있고, A-B, B-C, A-D, B-D, E-A의 길이 있고, 동혁이의 여행 계획이 E C B C D 라면 E-A-B-C-B-C-B-D라는 여행경로를 통해 목적을 달성할 수 있다.

도시들의 개수와 도시들 간의 연결 여부가 주어져 있고, 동혁이의 여행 계획에 속한 도시들이 순서대로 주어졌을 때(중복 가능) 가능한지 여부를 판별하는 프로그램을 작성하시오.

입력
첫 줄에 도시의 수 N이 주어진다. N은 200이하이다. 둘째 줄에 여행 계획에 속한 도시들의 수 M이 주어진다. M은 1000이하이다. 
다음 N * N 행렬을 통해 임의의 두 도시가 연결되었는지에 관한 정보가 주어진다. 1이면 연결된 것이고 0이면 연결이 되지 않은 것이다. 
A와 B가 연결되었으면 B와 A도 연결되어 있다. 마지막 줄에는 여행 계획이 주어진다.

출력
첫 줄에 가능하면 YES 불가능하면 NO를 출력한다.

예제 입력 1  복사
3
3
0 1 0
1 0 1
0 1 0
1 2 3
예제 출력 1  복사
YES


PS:
	* Union-Find 알고리즘을 이용하여 문제 풀이.
	* 여행 경로에 포함된 도시가 다 같은 트리에 포함되어있으면 어떤식으로도 여행 가능
	* 여행 경로에 포함된 도시의 최종 조상이 같은지 확인하여 모두 같으면 여행을 갈 수 있다.

	
import java.io.*;
import java.util.*;

public class Main {

    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    static int N, M, T;

    static int[] cities = new int[201];

    public static void main(String args[]) throws Exception {

        br = new BufferedReader(new InputStreamReader(System.in));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        N = Integer.parseInt(br.readLine());
        M = Integer.parseInt(br.readLine());

        for(int i= 0; i <= 200; ++i)
            cities[i] = i;

        for(int i = 1; i <= N; ++i) {
            st = new StringTokenizer(br.readLine());
            for(int j = 1; j <= N; ++j) {
                int connection = Integer.parseInt(st.nextToken());
                if(connection == 1) {
                    unionParent(i, j);
                }
            }
        }

/*
        for(int i = 0; i < N; ++i)
            bw.write(cities[i] + "    ");
        bw.write("\n");
*/

        st = new StringTokenizer(br.readLine());
        // 모두의 조상이 같으면 성공
        int ancestor = findParent(Integer.parseInt(st.nextToken()));
        boolean hasSameAncestor = true;

        while(st.hasMoreTokens()) {

            int next = Integer.parseInt(st.nextToken());

            int nextAncestor = findParent(next);

            if(ancestor != nextAncestor) {
                hasSameAncestor = false;
                break;
            }
        }

        bw.write(hasSameAncestor ? "YES\n" : "NO\n");
        bw.flush();
    }

    public static int findParent(int n) {
        if(cities[n] == n) return n;
        return cities[n] = findParent(cities[n]);
    }

    public static void unionParent(int n1, int n2) {

        n1 = findParent(n1);
        n2 = findParent(n2);

        if(n1 < n2)
            cities[n2] = n1;
        else
            cities[n1] = n2;
    }
}

	
	
	
	
	
	
