숨바꼭질 성공 한국어   

문제
수빈이는 동생과 숨바꼭질을 하고 있다. 수빈이는 현재 점 N(0 ≤ N ≤ 100,000)에 있고, 동생은 점 K(0 ≤ K ≤ 100,000)에 있다. 
수빈이는 걷거나 순간이동을 할 수 있다. 만약, 수빈이의 위치가 X일 때 걷는다면 1초 후에 X-1 또는 X+1로 이동하게 된다. 순간이동을 하는 경우에는 1초 후에 2*X의 위치로 이동하게 된다.

수빈이와 동생의 위치가 주어졌을 때, 수빈이가 동생을 찾을 수 있는 가장 빠른 시간이 몇 초 후인지 구하는 프로그램을 작성하시오.

입력
첫 번째 줄에 수빈이가 있는 위치 N과 동생이 있는 위치 K가 주어진다. N과 K는 정수이다.

출력
수빈이가 동생을 찾는 가장 빠른 시간을 출력한다.

예제 입력 1  복사
5 17
예제 출력 1  복사
4

PS:
	* 아주 중요한게 100000 보다 더 넘게 갈 수 있다는 점이다.
	* 만약 동생이 100000 번에 위치해있으면 최대 200000번 까지 갈 수 있따는 의미이다.
	* 그래서 배열 범위를 잘 생각해봐야한다.



import java.io.*;
import java.util.*;

public class Main {

    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    static final int NOT_VISIT = -1, MAX = 100000;
    static int N, K,cnt = 1;
    static int[] dp = new int[200001];

    public static void main(String args[]) throws Exception {

        br = new BufferedReader(new InputStreamReader(System.in));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        st = new StringTokenizer(br.readLine());

        N = Integer.parseInt(st.nextToken());
        K = Integer.parseInt(st.nextToken());

        Arrays.fill(dp, NOT_VISIT);

        BFS();

        bw.write((dp[K] - 1) + "\n");
        bw.flush();
        /*for(int i = 0; i <= 2 * K; ++i)
            System.out.format("%3d", dp[i]);*/
    }

    public static void BFS() {

        Queue<Integer> q = new ArrayDeque<>();

        q.add(N);
        dp[N] = cnt;

        while(!q.isEmpty()) {

            int next = q.poll();

            int[] nx = {next - 1, next + 1, next * 2};

            for(int i = 0; i< 3; ++i) {
                if(nx[i] < 0 || 200000 < nx[i]) continue;
                if(dp[nx[i]] != NOT_VISIT) continue;
                dp[nx[i]] = dp[next] + 1;
                q.add(nx[i]);
            }
        }
    }
}