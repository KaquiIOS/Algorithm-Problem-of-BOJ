이항 계수 2 성공 

문제
자연수 N과 정수 K가 주어졌을 때 이항 계수 (NK)를 10,007로 나눈 나머지를 구하는 프로그램을 작성하시오.

입력
첫째 줄에 N과 K가 주어진다. (1 ≤ N ≤ 1,000, 0 ≤ K ≤ N)

출력
 (NK)를 10,007로 나눈 나머지를 출력한다.

예제 입력 1  복사
5 2
예제 출력 1  복사
10


PS:
	* 메모이제이션을 통해 nCr % 10007 을 저장한다.
	* 재귀를 통해 nCr % 10007을 계산한다.
	* 이항계수의 성질을 이용하면 된다. nCr = n-1Cr + n-1Cr-1
	* 점화식을 더 잘 이해하는 방법은 삼각형을 하나 그려보는 것이다.
	
		1
	   1 1
	  1 2 1
	 1 3 3 1
	1 4 6 4 1

점화식:
	DP[N][R] = (rec(n-1, r-1) % 10007 + rec(n-1, r) % 10007) % 10007


import java.io.*;
import java.util.*;

public class Main {
    static final int MOD = 10007, NOT_VISIT = 0;
    static int N, R;
    static int[][] dp;

    public static void main(String args[]) throws Exception {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        StringTokenizer st = new StringTokenizer(br.readLine());

        N = Integer.parseInt(st.nextToken());
        R = Integer.parseInt(st.nextToken());

        dp = new int[N + 1][R + 1];
        dp[0][0] = 1;

        bw.write(rec(N, R) + "\n");
        bw.flush();
    }

    public static int rec(int n, int r) {
        if(dp[n][r] != NOT_VISIT) return dp[n][r];
        if(n < r || n == 0) return 0;
        if(r == 0) return 1;

        dp[n][r] = (rec(n - 1, r - 1) % MOD + rec(n -1, r) % MOD) % MOD;

        return dp[n][r];
    }
}


< 반복문 버전 >

import java.io.*;
import java.util.*;

public class Main {
    static final int MOD = 10007;
    static int[][] dp;
    static int N, R;

    public static void main(String args[]) throws Exception {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        StringTokenizer st = new StringTokenizer(br.readLine());

        N = Integer.parseInt(st.nextToken());
        R = Integer.parseInt(st.nextToken());

        dp = new int[N + 1][R + 1];

        dp[0][0] = 1;

        for (int i = 1; i <= N; ++i) {
            dp[i][0] = 1;
			// iCi 까지만 구하기
            for (int j = 1; j <= R && j <= i; ++j) {
                dp[i][j] = (dp[i - 1][j] % MOD + dp[i - 1][j - 1] % MOD) % MOD;
            }
        }
        /*
        for(int i = 0; i <= N; ++i) {
            for(int j = 0; j <= i; ++j) {
                System.out.format("%10d", dp[i][j]);
            }
            System.out.println();
        }*/
        bw.write(dp[N][R] + "\n");
        bw.flush();
    }
}






