합분해 성공 

문제
0부터 N까지의 정수 K개를 더해서 그 합이 N이 되는 경우의 수를 구하는 프로그램을 작성하시오.

덧셈의 순서가 바뀐 경우는 다른 경우로 센다(1+2와 2+1은 서로 다른 경우). 또한 한 개의 수를 여러 번 쓸 수도 있다.

입력
첫째 줄에 두 정수 N(1 ≤ N ≤ 200), K(1 ≤ K ≤ 200)가 주어진다.

출력
첫째 줄에 답을 1,000,000,000으로 나눈 나머지를 출력한다.

예제 입력 1  복사
20 2
예제 출력 1  복사
21


PS:
	* 메모이제이션을 통해 K개의 수를 사용하여 M을 만드는 방법의 수를 저장한다.
	* 반복문을 통해 K개의 수를 사용하여 M을 만드는 방법의 수를 계산한다.
	* 일단 K = 1 이면 각 수를 만드는 방법은 1개 밖에 없다.(자기자신)
	* 그리고 K 값에 상관없이 0을 만드는 방법은 1개이다. (K = 1 -> 0, K = 2 -> 0 + 0, K = 3 -> 0 + 0 + 0)
	* K개의 수를 사용하여 M 값을 만드는 방법은 
		1. K-1개의 수를 사용하여 M 값을 만드는 방법에 + 0은 한 경우들
		2. K개의 수를 사용하여 M - 1 값을 만드는 방법들의 마지막 값에  + 1을 한 경우들
	  위의 두 방법을 더하면 K개의 수를 이용하여 M 값을 만드는 방법의 수가 나온다.
	  
점화식:
	DP[K][M] = (DP[K-1][M] % MOD + DP[K][M-1] % MOD) % MOD
	
	
import java.io.*;
import java.util.*;

public class Main {
    static final int NOT_VISIT = -1, MOD = 1000000000;
    static int[][] dp;
        static int N, K = 0;

    public static void main(String args[]) throws Exception {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        StringTokenizer st = new StringTokenizer(br.readLine());

        N = Integer.parseInt(st.nextToken());
        K = Integer.parseInt(st.nextToken());

        dp = new int[K + 1][N + 1];

        Arrays.fill(dp[1], 1);

        for(int i = 2; i <= K; ++i) {
            dp[i][0] = 1;
            for(int j = 1; j <= N; ++j)
                dp[i][j] = (dp[i-1][j] % MOD + dp[i][j-1] % MOD) % MOD;
        }

        bw.write(dp[K][N] + "\n");
        bw.flush();
    }
}	
	

		
