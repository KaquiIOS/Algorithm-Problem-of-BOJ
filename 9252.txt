LCS 2 성공 스페셜 저지 

문제
LCS(Longest Common Subsequence, 최장 공통 부분 수열)문제는 두 수열이 주어졌을 때, 모두의 부분 수열이 되는 수열 중 가장 긴 것을 찾는 문제이다.

예를 들어, ACAYKP와 CAPCAK의 LCS는 ACAK가 된다.

입력
첫째 줄과 둘째 줄에 두 문자열이 주어진다. 문자열은 알파벳 대문자로만 이루어져 있으며, 최대 1000글자로 이루어져 있다.

출력
첫째 줄에 입력으로 주어진 두 문자열의 LCS의 길이를, 둘째 줄에 LCS를 출력한다.

LCS가 여러가지인 경우에는 아무거나 출력한다.

예제 입력 1  복사
ACAYKP
CAPCAK
예제 출력 1  복사
4
ACAK



PS:
	* 메모이제이션을 통해 각 문자열이 가질 수 있는 LCS를 구한다.
	* 반복문을 통해 각 문자열이 가질 수 있는 LCS를 계산한다.
	* 경로를 추적하는 방법은 역시 가장 LCS에서 하나씩 빼는 방법이다.
	* DP[N][M] 에는 가장 큰 LCS의 길이가 들어있을 것이다.
	* 우리가 LCS를 만들 땐 글자가 같으면 [N-1][M-1] + 1, 다르면 max([N-1][M], [N][M-1]) 으로 했는데 이를 반대로 하면 된다.
	* [N][M]에서 1번 문자열의 N번 문자와 2번 문자열 M번 문자가 같으면 [N-1][M-1]로 이동한다.
	* 두 문자가 다르면 [N-1][M] 과 [N][M-1] 중 큰 쪽으로 가면 된다. 같으면 아무 곳이나 가도 상관없다.
	* 혹은 dp[n][m]과 같은 값(어차피 둘 중에 큰값)을 따라서 이동해도 된다. 여기선 이 방법으로 하겠다.
	
	
점화식:
	DP[N][M] = DP[N-1][M-1] + 1  if(STR1[N] == STR2[M])
			 = max(DP[N-1][M], DP[N][M-1])
			 
추적 점화식:
	if(STR1[N] == STR2[M]) 글자 추가, N--, M--
	else if(dp[n][m] == dp[n-1][m]) n--;
	else if(dp[n][m] == dp[n][m-1]) m--;


import java.io.*;
import java.util.*;

public class Main {
    static final int NOT_VISIT = -1;
    static int[][] dp;
    static String input1, input2;
    static int N, M;
    static Stack<Character> s;

    static BufferedReader br = null;
    static BufferedWriter bw = null;

    public static void main(String args[]) throws Exception {

        br = new BufferedReader(new InputStreamReader(System.in));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        s = new Stack<>();

        input1 = br.readLine();
        input2 = br.readLine();

        N = input1.length();
        M = input2.length();

        dp = new int[N + 1][M + 1];

        for (int i = 1; i <= N; ++i) {
            char char1 = input1.charAt(i - 1);
            for (int j = 1; j <= M; ++j) {
                dp[i][j] = (char1 == input2.charAt(j - 1)) ? dp[i - 1][j - 1] + 1 : Math.max(dp[i - 1][j], dp[i][j - 1]);
            }
        }

        bw.write(dp[N][M] + "\n");

        rec(N, M);

        bw.flush();
    }

    public static void rec(int n, int m) throws Exception {

        if (n < 1 || m < 1) return;

        if (input1.charAt(n - 1) == input2.charAt(m - 1)) {
            rec(n - 1, m - 1);
            bw.write(input1.charAt(n-1) + "");
        } else {
            if (dp[n][m] == dp[n - 1][m])
                rec(n - 1, m);
            else if(dp[n][m] == dp[n][m-1])
                rec(n, m - 1);
        }
    }
}