네트워크 연결 성공 
시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
2 초	128 MB	6637	3490	2031	50.598%
문제
도현이는 컴퓨터와 컴퓨터를 모두 연결하는 네트워크를 구축하려 한다. 
하지만 아쉽게도 허브가 있지 않아 컴퓨터와 컴퓨터를 직접 연결하여야 한다. 
그런데 모두가 자료를 공유하기 위해서는 모든 컴퓨터가 연결이 되어 있어야 한다. 
(a와 b가 연결이 되어 있다는 말은 a에서 b로의 경로가 존재한다는 것을 의미한다. a에서 b를 연결하는 선이 있고, b와 c를 연결하는 선이 있으면 a와 c는 연결이 되어 있다.)

그런데 이왕이면 컴퓨터를 연결하는 비용을 최소로 하여야 컴퓨터를 연결하는 비용 외에 다른 곳에 돈을 더 쓸 수 있을 것이다. 
이제 각 컴퓨터를 연결하는데 필요한 비용이 주어졌을 때 모든 컴퓨터를 연결하는데 필요한 최소비용을 출력하라. 
모든 컴퓨터를 연결할 수 없는 경우는 없다.

입력
첫째 줄에 컴퓨터의 수 N (1 ≤ N ≤ 1000)가 주어진다.

둘째 줄에는 연결할 수 있는 선의 수 M (1 ≤ M ≤ 100,000)가 주어진다.

셋째 줄부터 M+2번째 줄까지 총 M개의 줄에 각 컴퓨터를 연결하는데 드는 비용이 주어진다. 
이 비용의 정보는 세 개의 정수로 주어지는데, 
만약에 a b c 가 주어져 있다고 하면 a컴퓨터와 b컴퓨터를 연결하는데 비용이 c (1 ≤ c ≤ 10,000) 만큼 든다는 것을 의미한다.

출력
모든 컴퓨터를 연결하는데 필요한 최소비용을 첫째 줄에 출력한다.

예제 입력 1  복사
6
9
1 2 5
1 3 4
2 3 2
2 4 7
3 4 6
3 5 11
4 5 3
4 6 8
5 6 8
예제 출력 1  복사
23

PS:
	* Kruskal 알고리즘을 이용하여 MST 를 만든다.
	* Prioirty Queue를 이용하여 간선의 정렬을 더욱 빠르게 수행한다.
	* 사이클 발생 유무는 Union-Find 알고리즘을 이용하여 확인한다.
	* 간선이 V - 1개만 채택되도록 예외처리를 한다.
	
	
import java.io.*;
import java.util.*;

public class Main {

    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    static int V,E;

    static int[] cities = new int[10001];

    static class Edge implements Comparable<Edge>{
        int start;
        int end;
        int cost;

        public Edge(int _start, int _end, int _cost) {
            start = _start;
            end = _end;
            cost = _cost;
        }

        @Override
        public int compareTo(Edge o) {
            return cost > o.cost ? 1 : cost == o.cost ? 0 : -1;
        }
    }

    public static void main(String args[]) throws Exception {

        br = new BufferedReader(new InputStreamReader(System.in));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        V = Integer.parseInt(br.readLine());
        E = Integer.parseInt(br.readLine());

        PriorityQueue<Edge> priorityQueue = new PriorityQueue<>();

        for(int i = 1; i <= V; ++i)
            cities[i] = i;

        for(int i = 0; i < E; ++i) {
            st = new StringTokenizer(br.readLine());

            int s = Integer.parseInt(st.nextToken());
            int e = Integer.parseInt(st.nextToken());
            int cost = Integer.parseInt(st.nextToken());

            priorityQueue.add(new Edge(s,e,cost));
        }

        int sum = 0;
        int cnt = 0;
        for(int i = 0; i < E && cnt < V - 1; i++) {

            Edge e = priorityQueue.poll();

            if(unionParent(e.start, e.end)) {
                sum += e.cost;
                cnt++;
            }
        }

        bw.write(sum + "\n");
        bw.flush();
    }

    public static int findParent(int n) {
        if(cities[n] == n) return n;
        return cities[n] = findParent(cities[n]);
    }

    public static boolean unionParent(int n1, int n2) {

        n1 = findParent(n1);
        n2 = findParent(n2);

        if(n1 != n2) {
            if(n1 < n2) cities[n2] = n1;
            else cities[n1] = n2;
            return true;
        }
        return false;
    }
}





