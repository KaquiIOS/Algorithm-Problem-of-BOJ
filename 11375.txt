열혈강호 성공

문제
강호네 회사에는 직원이 N명이 있고, 해야할 일이 M개가 있다. 
직원은 1번부터 N번까지 번호가 매겨져 있고, 일은 1번부터 M번까지 번호가 매겨져 있다.

각 직원은 한 개의 일만 할 수 있고, 각각의 일을 담당하는 사람은 1명이어야 한다.

각각의 직원이 할 수 있는 일의 목록이 주어졌을 때, M개의 일 중에서 최대 몇 개를 할 수 있는지 구하는 프로그램을 작성하시오.

입력
첫째 줄에 직원의 수 N과 일의 개수 M이 주어진다. (1 ≤ N, M ≤ 1,000)

둘째 줄부터 N개의 줄의 i번째 줄에는 i번 직원이 할 수 있는 일의 개수와 할 수 있는 일의 번호가 주어진다.

출력
첫째 줄에 강호네 회사에서 할 수 있는 일의 개수를 출력한다.

예제 입력 1 
5 5
2 1 2
1 1
2 2 3
3 3 4 5
1 1
예제 출력 1 
4


PS:

	* 네트워크 플로우 + 이분 매칭을 이용해서 문제 풀이
	* 네트워크 플로우 모델링은 여전히 어렵다
	* 현재 정점이 할 수 있는 작업을 다른 정점이 할 수 있는지 확인할 떄 주의할 것.



import java.io.*;
import java.util.*;

public class Main {

    static StringBuilder sb = new StringBuilder();
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
    static StringTokenizer st;

    static final int MAX = 1010;

    static int V, E;
    static ArrayList<Integer>[] graph = new ArrayList[MAX];
    static boolean[] isVisited =  new boolean[MAX];
    static int[] owner = new int[MAX];

    public static void main(String args[]) throws Exception {

        st = new StringTokenizer(br.readLine());

        V = Integer.parseInt(st.nextToken());
        E = Integer.parseInt(st.nextToken());

        // 그래프 초기화
        for (int i = 1; i <= V; ++i) {
            graph[i] = new ArrayList<>();
            st = new StringTokenizer(br.readLine());
            st.nextToken();

            while(st.hasMoreTokens())
                graph[i].add(Integer.parseInt(st.nextToken()));
        }

        int ans = 0;

        for (int i = 1; i <= V; ++i) {
            if(DFS(i)) ans++;
            Arrays.fill(isVisited, 0, E + 1, false);
        }

        bw.write(ans + "\n");
        bw.flush();
    }

    public static boolean DFS(int start) {

        if(isVisited[start]) return false;
        isVisited[start] = true;

        Iterator<Integer> it = graph[start].iterator();

        while(it.hasNext()) {
            // 연결된 다음 노드
            int next = it.next();

            // 현재 위치를 선점하고 있는 노드가 다른 곳으로 갈 수 있으면 보내고 자기가 선점한다.
			// DFS(next)가 아니라 DFS(owner[next]) 이다..
            if (owner[next] == 0 || DFS(owner[next])) {
                owner[next] = start;
                return true;
            }
        }
        return false;
    }
}
