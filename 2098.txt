문제
외판원 순회 문제는 영어로 Traveling Salesman problem (TSP) 라고 불리는 문제로 computer science 분야에서 가장 중요하게 취급되는 문제 중 하나이다. 
여러 가지 변종 문제가 있으나, 여기서는 가장 일반적인 형태의 문제를 살펴보자.

1번부터 N번까지 번호가 매겨져 있는 도시들이 있고, 도시들 사이에는 길이 있다. 
(길이 없을 수도 있다) 이제 한 외판원이 어느 한 도시에서 출발해 N개의 도시를 모두 거쳐 다시 원래의 도시로 돌아오는 순회 여행 경로를 계획하려고 한다. 
단, 한번 갔던 도시로는 다시 갈 수 없다. (맨 마지막에 여행을 출발했던 도시로 돌아오는 것은 예외) 
이런 여행 경로는 여러 가지가 있을 수 있는데, 가장 적은 비용을 들이는 여행 계획을 세우고자 한다.

각 도시간에 이동하는데 드는 비용은 행렬 W[i][j]형태로 주어진다.
W[i][j]는 도시 i에서 도시 j로 가기 위한 비용을 나타낸다. 비용은 대칭적이지 않다. 
즉, W[i][j] 는 W[j][i]와 다를 수 있다. 모든 도시간의 비용은 양의 정수이다. 
W[i][i]는 항상 0이다. 경우에 따라서 도시 i에서 도시 j로 갈 수 없는 경우도 있으며 이럴 경우 W[i][j]=0이라고 하자.

N과 비용 행렬이 주어졌을 때, 가장 적은 비용을 들이는 외판원의 순회 여행 경로를 구하는 프로그램을 작성하시오.

입력
첫째 줄에 도시의 수 N이 주어진다. (2<=N<=10) 다음 N개의 줄에는 비용 행렬이 주어진다. 
각 행렬의 성분은 1,000,000 이하의 양의 정수이며, 갈 수 없는 경우는 0이 주어진다. 
W[i][j]는 도시 i에서 j로 가기 위한 비용을 나타낸다.

항상 순회할 수 있는 경우만 입력으로 주어진다.

출력
첫째 줄에 외판원의 순회에 필요한 최소 비용을 출력한다.

예제 입력 1  복사
4
0 10 15 20
5  0  9 10
6 13  0 12
8  8  9  0
예제 출력 1  복사
35


PS:
	* 완전탐색으로 풀기엔 시간이 너무나 많이 걸리는 문제이다. O(N!) 시간이 든다.
	* 중복되는 구간이 많이 발생하기에 이 부분을 메모이제이션을 이용하여 중복을 없앤다.
	* N = 10이면 3백만정도이고 N = 11이면 4천만 정도이다. 
	* 완전탐색 코드는 맨 아래에 있다.
	
	* 그래서 DP를 이용하여 문제를 풀이하면 조금 시간을 줄일 수 있다.
	* 여기서 생각해볼 것은 어떤 방법으로 모든 도시를 방문했는지 확인하는  것이다.
		- 1. CHECK[City] 배열로 확인하려면 dp 배열을 어떤식으로 사용할 지 잘 모르겠다.
		- 2. Bitmask 로 방문한 도시들의 목록을 이용하여 확인한다.
		
	* 1번은 한 번 만들어 보려했는데 재귀를 만드는 과정에서 '..어?' 라는 생각과 함께 접었다. (직접 만들어보면 된다)
	* 그래서, 2번을 이용하여 프로그램을 작성하였다.
	
	* 먼저 Bitmask 로 어떻게 모든 도시를 순회하였는지 확인하냐면
		
		1 	 		( 0001 )
		1 2 		( 0011 )
		1 2 3		( 0111 )
		1 2 3 4		( 1111 )   ->  ( 1 << N == 10000, (1 << N) - 1 = 1111 를 이용하여 모든 도시 순회 확인 )
		
	  과 같이 한번의 계산으로 바로 확인할 수 있다. 
	  
	* 빠른 탐색을 위해 많은 공간을 낭비하는 방법이지만 공간은 넓으니 ㅇㅁㅇ
	
	* 메모이제이션을 통해 N번 위치에서 타고온 경로가 VISIT 일 때 원점으로 갈 수 있는 최단 경로의 비용을 저장한다. (여기서 착각하지 말 것. 현재까지의 타고온 경로를 사용한다)
	  EX) N = 4이면 배열의 길이는 1 << 4개가 되어야한다. 1111 -> DP[4][16] = DP[4][1<<4]
	* 재귀를 통해 N번 위치에서 타고온 경로가 VISIT 일 때 원점으로 갈 수 있는 최단 경로의 비용을 계산한다.
	
	
점화식:
	DP[N][VISIT] = TSP(DP[N][VISIT], TSP(NEXT, VISIT + 1 << N) + weight[N][NEXT]);


< Bitmask를 이용한 방법 >

import java.io.*;
import java.util.*;

public class Main {

    static final int NOT_VISIT = 0, MAX = 987654321, NMAX = 16;
    static int[][] weight = new int[NMAX][NMAX], dp = new int[NMAX][1 << NMAX];
    static int N;

    static BufferedReader br = null;
    static BufferedWriter bw = null;
    static StringTokenizer st = null;

    public static void main(String args[]) throws Exception {

        br = new BufferedReader(new InputStreamReader(System.in));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        N = Integer.parseInt(br.readLine());

        for(int i = 0 ; i < N; ++i) {
            st = new StringTokenizer(br.readLine());
            for(int j = 0; j < N; ++j)
                weight[i][j] = Integer.parseInt(st.nextToken());
        }

        // 1번은 방문한 상태로 시작
        int ans = rec(0, 1);

        bw.write(ans + "\n");
        bw.flush();
    }

    public static int rec(int cur, int visited) {

        // 원점으로 돌아가는 경우 만약 길이 없으면 MAX return
        if(visited == (1 << N) - 1) return weight[cur][0] != 0 ? weight[cur][0] : MAX;
        // 방문했던 지점이면 중단
        if(dp[cur][visited] != NOT_VISIT) return dp[cur][visited];

        dp[cur][visited] = MAX;

        for(int next = 0; next < N; ++next) {
            // 경로가 없으면 중단
            if(weight[cur][next] == 0) continue;
            // 방문했던 경로이면 중단
            if((visited & 1 << next) > 0) continue;
            // 다음 경로 이동
            dp[cur][visited] = Math.min(dp[cur][visited], rec(next, visited | 1 << next) + weight[cur][next]); // visited + 1 << next == visited | 1 << next
        }

        return dp[cur][visited];
    }
}




< 답은 맞지만 O(N!)이 걸리는 코드 >


import java.io.*;
import java.util.*;

public class Main {

    static final int MAX = 200000000;
    static int[][] dp;
    static boolean[] check;
    static int N;

    static BufferedReader br = null;
    static BufferedWriter bw = null;
    static StringTokenizer st = null;

    public static void main(String args[]) throws Exception {

        br = new BufferedReader(new InputStreamReader(System.in));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        N = Integer.parseInt(br.readLine());

        dp = new int[N][N];
        check = new boolean[N];

        for(int i = 0 ; i < N; ++i) {
            st = new StringTokenizer(br.readLine());

            for(int j = 0; j < N; ++j)
                dp[i][j] = Integer.parseInt(st.nextToken());
        }

        check[0] = true;
        int ans = rec(0, 0);

        bw.write(ans + "\n");
        bw.flush();
    }

    public static boolean isTravelEnd() {
        for(int i = 0; i < N; ++i)
            if(!check[i]) return false;
        return true;
    }

    public static int rec(int n, int sum) {

        if(isTravelEnd()) return dp[n][0] == 0 ? MAX : sum + dp[n][0];

        int min = MAX;

        for(int i = 0; i < N; ++i) {

            if(check[i]) continue;
            if(dp[n][i] == 0) continue;

            check[i] = true;
            min= Math.min(rec(i, sum + dp[n][i]), min);
            check[i] = false;
        }

        return min;
    }
}