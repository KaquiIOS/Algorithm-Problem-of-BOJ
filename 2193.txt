이친수 

문제
0과 1로만 이루어진 수를 이진수라 한다. 이러한 이진수 중 특별한 성질을 갖는 것들이 있는데, 이들을 이친수(pinary number)라 한다. 이친수는 다음의 성질을 만족한다.

이친수는 0으로 시작하지 않는다.
이친수에서는 1이 두 번 연속으로 나타나지 않는다. 즉, 11을 부분 문자열로 갖지 않는다.
예를 들면 1, 10, 100, 101, 1000, 1001 등이 이친수가 된다. 하지만 0010101이나 101101은 각각 1, 2번 규칙에 위배되므로 이친수가 아니다.

N(1≤N≤90)이 주어졌을 때, N자리 이친수의 개수를 구하는 프로그램을 작성하시오.

입력
첫째 줄에 N이 주어진다.

출력
첫째 줄에 N자리 이친수의 개수를 출력한다.

예제 입력 1  복사
3
예제 출력 1  복사
2

PS:
	* 이전 자릿수의 값이 0인지 1인지 구분하여 생각. (이친수 조건)
	* 0 인 경우에는 다음에 0, 1이 올 수 있다.
	* 1 인 경우에는 다음에 0만 올 수 있다.
	* 시작은 무조건 1로 시작하게 한다. (이친수 조건)
	* 메모이제이션을 통해 현재 자리가 0, 1일때 가질 수 있는 이친수의 수를 기록한다.
	* 재귀를 통해 각 자리가 0, 1일때의 값을 계산한다.
  *** N = 90인 경우 INT 범위를 벗어나 오버플로우 발생 => LONG 사용.
    * 문제를 풀기전에는 몰랐는데(제대로 결과값의 관계를 생각안해봄) 풀고나니 피보나치 수열의 형태를 띔.
	
점화식:
	DP[N] = DP[N] + rec(n+1, 0) + rec(n+1, 1) if(currentNumber == 1)
		  = DP[N] + rec(n+1, 1) if(currentNumber == 0)
		  
	
import java.io.*;
import java.util.*;


public class Main {

    final static int NOT_VISIT = -1;
    static long[][] dp;
    static int N;

    public static void main(String args[]) throws Exception{

        FastScanner fs = new FastScanner();

        N = fs.nextInt();

       dp = new long[N][2];

       for(int i = 0; i < N; ++i)
           Arrays.fill(dp[i], NOT_VISIT);

       long ans = rec(0, 1);

       System.out.println(ans);
    }

    public static long rec(int n, int curNum) {

        if(n == N-1) return 1;

        if(dp[n][curNum] != NOT_VISIT) return dp[n][curNum];

        dp[n][curNum] = 0;

        if(curNum == 1)
            dp[n][curNum] += rec(n+1, 0);
        else
            dp[n][curNum] += rec(n+1, 0) + rec(n+1, 1);

        return dp[n][curNum];
    }
}

class FastScanner {

    private BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    private StringTokenizer st;

    public int nextInt() throws Exception {
        if(st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());
        return Integer.parseInt(st.nextToken());
    }

    public long nextLong() throws Exception {
        if(st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());
        return Long.parseLong(st.nextToken());
    }

    public String nextLine() throws Exception {
        if(st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());
        return st.nextToken();
    }
}
		  
		  
		  

	