가장 긴 증가하는 부분 수열 4 성공 스페셜 저지 

문제
수열 A가 주어졌을 때, 가장 긴 증가하는 부분 수열을 구하는 프로그램을 작성하시오.

예를 들어, 수열 A = {10, 20, 10, 30, 20, 50} 인 경우에 가장 긴 증가하는 부분 수열은 A = {10, 20, 10, 30, 20, 50} 이고, 길이는 4이다.

입력
첫째 줄에 수열 A의 크기 N (1 ≤ N ≤ 1,000)이 주어진다.

둘째 줄에는 수열 A를 이루고 있는 Ai가 주어진다. (1 ≤ Ai ≤ 1,000)

출력
첫째 줄에 수열 A의 가장 긴 증가하는 부분 수열의 길이를 출력한다.

둘째 줄에는 가장 긴 증가하는 부분 수열을 출력한다.

예제 입력 1  복사
6
10 20 10 30 20 50
예제 출력 1  복사
4
10 20 30 50

PS:
	* 정말 왜 틀렸는지 몰라서 시간을 많이 버린 문제이다. 입출력에서 오류가 났었다. (가장 긴 증가하는 부분 수열 5 에서 다 맞는 코드가 이 문제에서 안돌아가서 멘붕이..)
	* O(NlogN) 의 방식으로 문제를 풀겠다.
	* DP[I] = 수열의 I번째 값에서 가질 수 있는 가장 작은 값을 저장. 
  *** DIST[I] = COST[I]가 DP에서 위치하는 자리의 인덱스를 저장.
    * 모든 계산을 한 후 DIST[I] 에서 각 0 - LEN 에 해당하는 COST의 값 하나만 출력.
	
	* EX)
	----------------
	* COST 1 3 2 4
	* DP   1 2 4
	* DIST 0 1 1 2
	------ANS-------
	* LEN  3
	* PATH 1 2 4
	----------------
	
	* 와 같은 경우에서 DIST[3], DIST[2], DIST[0] 을 출력하면 경로를 알 수 있다.
	
	
import java.io.*;
import java.util.*;

public class Main {

    static int[] dp, cost, distance;
    static int N, len = 0;

    public static void main(String args[]) throws Exception {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        N = Integer.parseInt(br.readLine());

        dp = new int[N];
        cost = new int[N];
        distance = new int[N];

        StringTokenizer st = new StringTokenizer(br.readLine());
        
        for(int i = 0; i < N; ++i)
            cost[i] = Integer.parseInt(st.nextToken());

        dp[0] = cost[0];

        for(int i = 1; i < N; ++i) {

            if(dp[len] < cost[i]) {
                dp[++len] = cost[i];
                distance[i] = len;
            } else {
                int p = lower_bound(0, len, cost[i]);
                distance[i] = p;
                dp[p] = cost[i];
            }
        }

        System.out.println(len + 1);

        getPath(N-1, len);
    }

    public static void getPath(int n, int target) {

        if(n == -1) return;
        else if(distance[n] != target) { 
            getPath(n - 1, target);
        } else {
            getPath(n - 1, target - 1);
            System.out.print(cost[n] + " ");
        };
    }

    public static int lower_bound(int left, int right, int data) {

        int mid = (left + right) / 2;

        if(dp[mid] == data) return mid;
        if(left == right) return left;
        return (dp[mid] < data) ? lower_bound(mid + 1, right, data) :lower_bound(left, mid, data);
    }
}	