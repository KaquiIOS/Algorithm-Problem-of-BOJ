좌표 정렬하기  

* Comparable<T> 를 implements 하여 비교할 수 있는 객체로 만듬.
* 바로 Arrays 에서 비교함수를 만들면 Compartor<T> 의 객체를 만들어 비교 수행.

문제
2차원 평면 위의 점 N개가 주어진다. 좌표를 x좌표가 증가하는 순으로, x좌표가 같으면 y좌표가 증가하는 순서로 정렬한 다음 출력하는 프로그램을 작성하시오.

입력
첫째 줄에 점의 개수 N (1 ≤ N ≤ 100,000)이 주어진다. 둘째 줄부터 N개의 줄에는 i번점의 위치 xi와 yi가 주어진다. (-100,000 ≤ xi, yi ≤ 100,000) 좌표는 항상 정수이고, 위치가 같은 두 점은 없다.

출력
첫째 줄부터 N개의 줄에 점을 정렬한 결과를 출력한다.

예제 입력 1  복사
5
3 4
1 1
1 -1
2 2
3 3
예제 출력 1  복사
1 -1
1 1
2 2
3 3
3 4

package SortingAlgorithm;

import java.io.*;
import java.util.*;

public class Main {

    final static int MAX_SIZE = 10001;

    public static void main(String args[]) throws Exception{

        FastScanner fs = new FastScanner();

        int testCase = fs.nextInt();

        Pair[] input = new Pair[testCase];

        for(int i = 0; i < testCase; ++i)
            input[i] = new Pair(fs.nextInt(), fs.nextInt());


        Arrays.sort(input);

        OutputStream out = new BufferedOutputStream(System.out);

        for(int i = 0 ; i < testCase; ++i)
            out.write((input[i].x + " " + input[i].y + "\n").getBytes());

        out.flush();
    }


}

class Pair implements Comparable<Pair>{

    public int x;
    public int y;

    public Pair(int x, int y) {
        this.x = x;
        this.y = y;
    }

    @Override
    public int compareTo(Pair o) {
        // 현재 객체의 x 가 o.x 보다 작다/크다 ->  -1/1 반환
        // 각 X의 값이 동일하다면
        // 현재 객체의 y 가 o.y 보다 작다/크다 -> -1/1 반환
        return (x == o.x ? (y < o.y ? -1 : 1) : (x < o.x ? -1 : 1));
    }
}

class FastScanner {

    private BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    private StringTokenizer st;

    public int nextInt() throws Exception {
        if(st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());
        return Integer.parseInt(st.nextToken());
    }

    public long nextLong() throws Exception {
        if(st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());
        return Long.parseLong(st.nextToken());
    }

    public String nextLine() throws Exception {
        if(st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());
        return st.nextToken();
    }
}
