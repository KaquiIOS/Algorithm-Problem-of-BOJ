최소비용 구하기 성공 
시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
0.5 초	128 MB	13969	4148	2318	28.745%
문제
n(1≤n≤1,000)개의 도시가 있다. 그리고 한 도시에서 출발하여 다른 도시에 도착하는 m(1≤m≤100,000)개의 버스가 있다. 
우리는 A번째 도시에서 B번째 도시까지 가는데 드는 버스 비용을 최소화 시키려고 한다. 
그러면 A번째 도시에서 B번째 도시 까지 가는데 드는 최소비용을 출력하여라.

입력
첫째 줄에 도시의 개수 n(1≤n≤1,000)이 주어지고 둘째 줄에는 버스의 개수 m(1≤m≤100,000)이 주어진다. 
그리고 셋째 줄부터 m+2줄까지 다음과 같은 버스의 정보가 주어진다. 먼저 처음에는 그 버스의 출발 도시의 번호가 주어진다. 
그리고 그 다음에는 도착지의 도시 번호가 주어지고 또 그 버스 비용이 주어진다. 
버스 비용은 0보다 크거나 같고, 100,000보다 작은 정수이다.

그리고 m+3째 줄에는 우리가 구하고자 하는 구간 출발점의 도시번호와 도착점의 도시번호가 주어진다. 
출발점에서 도착점을 갈 수 있는 경우만 입력으로 주어진다.

출력
첫째 줄에 출발 도시에서 도착 도시까지 가는데 드는 최소 비용을 출력한다.

예제 입력 1  복사
5
8
1 2 2
1 3 3
1 4 1
1 5 10
2 4 2
3 4 1
3 5 1
4 5 3
1 5
예제 출력 1  복사
4


PS:
	* 다익스트라 알고리즘을 사용해서 문제풀이
	
import java.io.*;
import java.util.*;

public class Main {

    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    static class Edge implements Comparable<Edge> {
        int next;
        int cost;

        public Edge(int next, int cost) {
            this.next = next;
            this.cost = cost;
        }

        @Override
        public int compareTo(Edge o) {
            return cost > o.cost ? 1 : cost == o.cost ? 0 : -1;
        }
    }
    // 시작 지점에서 다른 노드까지 가는데 드는 최소 비용 및 경로
    // 0 : cost
    // 1 : previous node
    static int[] dist = new int[20001];

    // 각 정점에서 연결된 지역 리스트
    static ArrayList<Edge>[] adlist = new ArrayList[20001];
    static int V, E;
    static final int INF = Integer.MAX_VALUE;
    static boolean[] check = new boolean[20001];

    public static void main(String args[]) throws Exception {

        br = new BufferedReader(new InputStreamReader(System.in));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        // 정점의 수, 간선의 수
        V = Integer.parseInt(br.readLine());
        E = Integer.parseInt(br.readLine());

        for(int i = 0; i <= V; ++i)
            adlist[i] = new ArrayList<>();

        // 간선 입력(방향 그래프)
        for(int i = 0; i < E; ++i) {
            st = new StringTokenizer(br.readLine());
            // 간선 정보
            int s = Integer.parseInt(st.nextToken());
            int e = Integer.parseInt(st.nextToken());
            int cost = Integer.parseInt(st.nextToken());
            // 간선 정보 저장
            adlist[s].add(new Edge(e, cost));
        }

        st = new StringTokenizer(br.readLine());
        // 시작 노드
        int startNode = Integer.parseInt(st.nextToken());
        int endNode = Integer.parseInt(st.nextToken());

        // 거리 배열 INF로 초기화
        Arrays.fill(dist, INF);

        dijkstra(startNode);

        bw.write(dist[endNode] + "\n");
        bw.flush();
    }

    public static void dijkstra(int start) {

        // 최소 비용 간선 선택을 빠르게
        PriorityQueue<Edge> pq = new PriorityQueue<>();

        // 시작 지점 설정
        dist[start] = 0;       

        pq.add(new Edge(start, 0));

        while(!pq.isEmpty()) {
            // 선택된 간선
            Edge e = pq.poll();

            // 이전 노드의 도착지점
            int curPos = e.next;
            // 이전 노드에서 지금 노드까지의 비용
            int cost = e.cost;

            // 이전까지 기록했던 최단거리보다
            // 이전 노드에서 현재 노드까지 오는 비용이 더 크면 pass
            if(dist[curPos] < cost) continue;

            int len = adlist[curPos].size();

            for(int i = 0; i < len; ++i) {
                // 선택된 노드의 인접 노드
                int next = adlist[curPos].get(i).next;
                // 현재까지의 경로 비용 + 현재 위치 -> 다음 위치까지 가는 경로의 비용
                int nextDistance = cost + adlist[curPos].get(i).cost;
                // 이전까지의 비용과 현재 갱신된 비용을 비교
                if(nextDistance < dist[next]) {
                    // 갱신된 값이 더 작다면 갱신
                    dist[next] = nextDistance;                   
                    pq.add(new Edge(next, nextDistance));
                }
            }
        }
    }
}