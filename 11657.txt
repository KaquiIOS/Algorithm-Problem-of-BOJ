타임머신 성공 

문제
N개의 도시가 있다. 그리고 한 도시에서 출발하여 다른 도시에 도착하는 버스가 M개 있다. 
각 버스는 A, B, C로 나타낼 수 있는데, A는 시작도시, B는 도착도시, C는 버스를 타고 이동하는데 걸리는 시간이다. 
시간 C가 양수가 아닌 경우가 있다. C = 0인 경우는 순간 이동을 하는 경우, C < 0인 경우는 타임머신으로 시간을 되돌아가는 경우이다.

1번 도시에서 출발해서 나머지 도시로 가는 가장 빠른 시간을 구하는 프로그램을 작성하시오.

입력
첫째 줄에 도시의 개수 N (1 ≤ N ≤ 500), 버스 노선의 개수 M (1 ≤ M ≤ 6,000)이 주어진다. 
둘째 줄부터 M개의 줄에는 버스 노선의 정보 A, B, C (1 ≤ A, B ≤ N, -10,000 ≤ C ≤ 10,000)가 주어진다. 

출력
첫째 줄에는 2번 도시까지 가는 가장 빠른 시간, ..., N-1번째 줄에는 N번 도시까지 가는 가장 빠른 시간을 출력한다. 
어떤 도시로 가는 가장 빠른 시간이 없는 경우에는 -1을 출력한다.

만약, 시작점에서 도달 가능한 타임머신으로 되어있는 사이클이 존재해 1번 도시에서 나머지 도시로 가는 가장 빠른 시간이 존재하지 않는 경우에는 -1을 출력한다.

예제 입력 1  복사
3 4
1 2 4
1 3 3
2 3 -1
3 1 -2
예제 출력 1  복사
4
3
예제 입력 2  복사
3 4
1 2 4
1 3 3
2 3 -4
3 1 -2
예제 출력 2  복사
-1
예제 입력 3  복사
3 2
1 2 4
1 2 3
예제 출력 3  복사
3
-1

PS:
	* 음의 간선이 있으므로 벨만포트 알고리즘을 사용한다.
	* 음의 순환을 체크하기 위해서 V - 1번 갱신을 수행한 다음에 한 번 더 수행한다.
		- 마지막 순환을 돌고나서 갱신이 이뤄졌다면 이는 음의 사이클이 존재 O
		- 마지막 순환을 돌고나서 갱신이 이뤄지지 않았다면 음의 사이클 존재 X
		- 1 ~ (V - 1)번 까지 갱신도중 한 번도 갱신되지 않으면 바로 반복문 종료

		
import java.io.*;
import java.util.*;

public class Main {

    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    static class Edge {
        int next;
        int cost;

        public Edge(int next, int cost) {
            this.next = next;
            this.cost = cost;
        }
    }

    static final int INF = 1987654321;
    static int T, V, E;
    static long[] dist = new long[510];

    static ArrayList<Edge>[] adList = new ArrayList[501];

    public static void main(String args[]) throws Exception {

        br = new BufferedReader(new InputStreamReader(System.in));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        st = new StringTokenizer(br.readLine());

        V = Integer.parseInt(st.nextToken());
        E = Integer.parseInt(st.nextToken());

        for(int i = 0; i <= V; ++i) {
            adList[i] = new ArrayList<>();
            dist[i] = INF;
        }

        for(int i = 0; i < E; ++i) {
            st = new StringTokenizer(br.readLine());

            int s = Integer.parseInt(st.nextToken());
            int e = Integer.parseInt(st.nextToken());
            int c = Integer.parseInt(st.nextToken());

            adList[s].add(new Edge(e,c));
        }

        boolean isUpdated = bellmanFord(1);

        if(isUpdated)
            bw.write("-1\n");
        else
            for(int i = 2; i <= V; ++i)
                bw.write((dist[i] == INF ? -1 : dist[i]) + "\n");

        bw.flush();
    }

    public static boolean bellmanFord(int start) {

        // 시작점 0 설정
        dist[start] = 0;
        // 마지막에 Update가 된 경우엔 음의 사이클이 존재한다.
        boolean isRelaxed = false;

        for(int i = 1; i <= V; ++i) {
            isRelaxed = false;
            for(int j = 1; j <= V; ++j) {
                int len = adList[j].size();
                // 경로 최단거리 갱신
                for(int k = 0; k < len; ++k) {
                    if(dist[j] + adList[j].get(k).cost < dist[adList[j].get(k).next]) {
                        dist[adList[j].get(k).next] = dist[j] + adList[j].get(k).cost;
                        isRelaxed = true;
                    }
                }
            }
            // 갱신이 한번도 이뤄지지 않으면 최단거리 탐색 끝
            if(!isRelaxed) break;
        }
        // True 인 경우 음의 사이클 존재
        // False 인 경우 최단거리 탐색 완료
        return isRelaxed;
    }
}


