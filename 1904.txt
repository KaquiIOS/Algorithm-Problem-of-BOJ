01타일 성공 

문제
지원이에게 2진 수열을 가르쳐 주기 위해, 지원이 아버지는 그에게 타일들을 선물해주셨다. 그리고 이 각각의 타일들은 0 또는 1이 쓰여 있는 낱장의 타일들이다.

어느 날 짓궂은 동주가 지원이의 공부를 방해하기 위해 0이 쓰여진 낱장의 타일들을 붙여서 한 쌍으로 이루어진 00 타일들을 만들었다. 
결국 지원이는 현재 1 하나만으로 이루어진 타일 또는 0타일을 두 개 붙인 한 쌍의 00타일들만이 남게 되었다.

그러므로 지원이는 타일로 더 이상 N개 수열로 이루어진 모든 2진 수열을 만들 수 없게 되었다. 
예를 들어, N=1일 때 1만 만들 수 있고, N=2일 때는 00, 11을 만들 수 있다. (01, 10은 만들 수 없게 되었다.) 
또한 N=4일 때는 0011, 0000, 1001, 1100, 1111 등 총 5개의 2진 수열을 만들 수 있다.

우리는 N이 주어졌을 때 지원이가 만들 수 있는 모든 가짓수를 세는 것이다. 단 타일들은 무한히 많은 것으로 가정하자.

입력
첫 번째 줄에 자연수 N이 주어진다.(N≤1,000,000)

출력
첫 번째 줄에 지원이가 만들 수 있는 길이가 N인 모든 2진 수열의 개수를 15746으로 나눈 나머지를 출력한다.

예제 입력 1  복사
4
예제 출력 1  복사
5


PS:
	* 메모이제이션을 통해 길이가 N일때 규칙에 맞게 만들 수 있는 이진수들의 개수를 저장한다.
	* 반복문을 통해 길이가 N일때 규칙에 맞게 만들 수 있는 이진수들의 개수를 계산한다.
	* 각각의 경우의 수를 그려보면 점화식이 나온다. 규칙은 아래와 같다.
		- 길이가 N-2인 이진수에 00 을 붙인 타일
		- 길이가 N-1인 이진수에 1을 붙인 타일
		- 나머지(N-3등..)은 이전 타일에 다 포함된 경우라서 위의 두 경우만 생각하면 된다.
		
점화식:
	DP[N] = DP[N-1] + DP[N-2]
	
	
import java.io.*;
import java.util.*;

public class Main {
    static final int MOD = 15746;
    static int[] dp;
    static int N, M;

    public static void main(String args[]) throws Exception {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        N = Integer.parseInt(br.readLine());

        dp = new int[N + 1];

        dp[0] = dp[1] = 1;
        dp[2] = 2;

        for(int i = 3; i <= N; ++i)
            dp[i] = (dp[i-1] % MOD + dp[i-2] % MOD) % MOD;

        bw.write(dp[N] + "\n");
        bw.flush();
    }
}
	