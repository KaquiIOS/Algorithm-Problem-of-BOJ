수 정렬하기

* 처음엔 그냥 단순히 Heap, Quick, Merge 같은 정렬을 이용하여 정렬을 하려했다.
* 그런데 시간초과가 나서 조금 더 생각을 해보니 계수정렬로 O(n) 에 끝낼 수 있는 문제였다.
* 따로 계수정렬을 사용하여 문제를 풀이하고 통과한 후 조금 더 간소화 하여 시간을 줄였다.
* 출력할 때 굉장히 시간이 많이 걸린다. OutputStream 을 이용하도록 하자.


문제
N개의 수가 주어졌을 때, 이를 오름차순으로 정렬하는 프로그램을 작성하시오.

입력
첫째 줄에 수의 개수 N(1 ≤ N ≤ 10,000,000)이 주어진다. 둘째 줄부터 N개의 줄에는 숫자가 주어진다. 이 수는 10,000보다 작거나 같은 자연수이다.

출력
첫째 줄부터 N개의 줄에 오름차순으로 정렬한 결과를 한 줄에 하나씩 출력한다.

예제 입력 1  복사
10
5
2
3
1
4
2
3
5
1
7
예제 출력 1  복사
1
1
2
2
3
3
4
5
5
7

import java.io.*;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {

    final static int INPUT_SIZE = 100;

    public static void main(String args[]) throws Exception{

        FastScanner fs = new FastScanner();

		// 더 빠른 방법
        int testCase = fs.nextInt();
        int[] input = new int[10001];

        for(int i = 0; i < testCase; ++i) {
            int inp = fs.nextInt();
            input[inp]++;
        }

        OutputStream out = new BufferedOutputStream(System.out);
        for(int i = 1; i < 10001; ++i)
            for(int j = 0; j < input[i]; ++j)
                out.write((i + "\n").getBytes());

        out.flush();
		
		/*        
		// 계수 정렬을 이용한 방법
		FastScanner fs = new FastScanner();

        int testCase = fs.nextInt();
        int[] input = new int[testCase];

        for(int i = 0; i < testCase; ++i)
            input[i] = fs.nextInt();

        countingSort(input);
		*/
    }
	// 계수 정렬
	public static void countingSort(int[] input) throws IOException{

        int[] countArr = new int[MAX_SIZE];

        for(int i = 0; i < input.length; ++i)
            countArr[input[i]]++;

        for(int i = 2; i < MAX_SIZE; ++i)
            countArr[i] = countArr[i] + countArr[i - 1];

         int[] sortedInput = new int[input.length];

         for(int i = 0; i < input.length; ++i)
             sortedInput[--countArr[input[i]]] =  input[i];

         OutputStream out = new BufferedOutputStream(System.out);

        for(int i = 0; i < input.length; ++i)
                out.write((sortedInput[i] + "\n").getBytes());

        out.flush();
    }
}

class FastScanner {

    private BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    private StringTokenizer st;

    public int nextInt() throws Exception {
        if(st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());
        return Integer.parseInt(st.nextToken());
    }

    public long nextLong() throws Exception {
        if(st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());
        return Long.parseLong(st.nextToken());
    }

    public String nextLine() throws Exception {
        if(st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());
        return st.nextToken();
    }
}
