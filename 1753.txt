최단경로 성공 
시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
1 초	128 MB	22609	6361	3021	25.816%
문제
방향그래프가 주어지면 주어진 시작점에서 다른 모든 정점으로의 최단 경로를 구하는 프로그램을 작성하시오. 
단, 모든 간선의 가중치는 10 이하의 자연수이다.

입력
첫째 줄에 정점의 개수 V와 간선의 개수 E가 주어진다. (1≤V≤20,000, 1≤E≤300,000) 모든 정점에는 1부터 V까지 번호가 매겨져 있다고 가정한다. 
둘째 줄에는 시작 정점의 번호 K(1≤K≤V)가 주어진다. 
셋째 줄부터 E개의 줄에 걸쳐 각 간선을 나타내는 세 개의 정수 (u, v, w)가 순서대로 주어진다. 
이는 u에서 v로 가는 가중치 w인 간선이 존재한다는 뜻이다. u와 v는 서로 다르며 w는 10 이하의 자연수이다. 
서로 다른 두 정점 사이에 여러 개의 간선이 존재할 수도 있음에 유의한다.

출력
첫째 줄부터 V개의 줄에 걸쳐, i번째 줄에 i번 정점으로의 최단 경로의 경로값을 출력한다. 
시작점 자신은 0으로 출력하고, 경로가 존재하지 않는 경우에는 INF를 출력하면 된다.

예제 입력 1  복사
5 6
1
5 1 1
1 2 2
1 3 3
2 3 4
2 4 5
3 4 6
예제 출력 1  복사
0
2
3
7
INF

PS:
	* 다익스트라 알고리즘을 이용하여 문제풀이.
		- 자연수 가중치라는 조건 존재
	* O(NlogN) 방식으로 풀이

package SortingAlgorithm;

import java.io.*;
import java.util.*;

public class Main {

    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    static class Edge implements Comparable<Edge> {
        int next;
        int cost;

        public Edge(int next, int cost) {
            this.next = next;
            this.cost = cost;
        }

        @Override
        public int compareTo(Edge o) {
            return cost > o.cost ? 1 : cost == o.cost ? 0 : -1;
        }
    }
    // 시작 지점에서 다른 노드까지 가는데 드는 최소 비용 및 경로
    // 0 : cost
    // 1 : previous node
    static int[][] dist = new int[2][20001];

    // 각 정점에서 연결된 지역 리스트
    static ArrayList<Edge>[] adlist = new ArrayList[20001];
    static int V, E;
    static final int INF = Integer.MAX_VALUE;
    static boolean[] check = new boolean[20001];

    public static void main(String args[]) throws Exception {

        br = new BufferedReader(new InputStreamReader(System.in));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        st = new StringTokenizer(br.readLine());
        // 정점의 수, 간선의 수
        V = Integer.parseInt(st.nextToken());
        E = Integer.parseInt(st.nextToken());

        // 시작 노드
        int startNode = Integer.parseInt(br.readLine());

        for(int i = 0; i <= V; ++i)
            adlist[i] = new ArrayList<>();

        // 간선 입력(방향 그래프)
        for(int i = 0; i < E; ++i) {
            st = new StringTokenizer(br.readLine());
            // 간선 정보
            int s = Integer.parseInt(st.nextToken());
            int e = Integer.parseInt(st.nextToken());
            int cost = Integer.parseInt(st.nextToken());
            // 간선 정보 저장
            adlist[s].add(new Edge(e, cost));
        }

        // 거리 배열 INF로 초기화
        Arrays.fill(dist[0], INF);

        dijkstra(startNode);

        for(int i = 1; i <= V; ++i)
            bw.write(dist[0][i] == INF ? "INF\n" : dist[0][i] + "\n");
        bw.flush();

        for(int i = 1; i <= V; ++i) {
            Arrays.fill(check, 1, V + 2, false);
            bw.write(i + "번까지의 경로 : ");
            findPath(i);
            bw.write("\n");
            bw.flush();
        }
    }


    // 시작점부터 입력된 node까지의 최단 경로를 역으로 탐색하면서 구한다.
    // 만약 갈 길이 없는 경우(dist == INF) 같은 경우는 다른 문구 출력
    public static void findPath(int node) throws IOException{
        if(dist[0][node] == INF) {
            bw = new BufferedWriter(new OutputStreamWriter(System.out));
            bw.write("can't make path \n");
            return;
        }

        if(!check[node]) {
            check[node] = true;
            findPath(dist[1][node]);
            bw.write(node + " ");
        }
    }


    public static void dijkstra(int start) {

        // 최소 비용 간선 선택을 빠르게
        PriorityQueue<Edge> pq = new PriorityQueue<>();

        // 시작 지점 설정
        dist[0][start] = 0;
        dist[1][start] = start;

        pq.add(new Edge(start, 0));

        while(!pq.isEmpty()) {
            // 선택된 간선
            Edge e = pq.poll();

            // 이전 노드의 도착지점
            int curPos = e.next;
            // 이전 노드에서 지금 노드까지의 비용
            int cost = e.cost;

            // 이전까지 기록했던 최단거리보다
            // 이전 노드에서 현재 노드까지 오는 비용이 더 크면 pass
            if(dist[0][curPos] < cost) continue;

            int len = adlist[curPos].size();

            for(int i = 0; i < len; ++i) {
                // 선택된 노드의 인접 노드
                int next = adlist[curPos].get(i).next;
                // 현재까지의 경로 비용 + 현재 위치 -> 다음 위치까지 가는 경로의 비용
                int nextDistance = cost + adlist[curPos].get(i).cost;
                // 이전까지의 비용과 현재 갱신된 비용을 비교
                if(nextDistance < dist[0][next]) {
                    // 갱신된 값이 더 작다면 갱신
                    dist[0][next] = nextDistance;
                    // 경로도 갱신
                    dist[1][next] = curPos;
                    pq.add(new Edge(next, nextDistance));
                }
            }
        }
    }
}