1로 만들기 (1번)

문제
정수 X에 사용할 수 있는 연산은 다음과 같이 세 가지 이다.

X가 3으로 나누어 떨어지면, 3으로 나눈다.
X가 2로 나누어 떨어지면, 2로 나눈다.
1을 뺀다.
정수 N이 주어졌을 때, 위와 같은 연산 세 개를 적절히 사용해서 1을 만들려고 한다. 연산을 사용하는 횟수의 최소값을 출력하시오.

입력
첫째 줄에 1보다 크거나 같고, 10^6보다 작거나 같은 자연수 N이 주어진다.

출력
첫째 줄에 연산을 하는 횟수의 최소값을 출력한다.

예제 입력 1  복사
2
예제 출력 1  복사
1
예제 입력 2  복사
10
예제 출력 2  복사
3

	
PS
	- 메모이제이션을 통해 각 N을 1로 만드는 최소한의 연한 횟수를 저장
	- 각 경우에 따라 재귀를 통해 N을 1로 만드는 최소한의 횟수를 계산
	
점화식
	DP[N] : 정수 X를 N으로 만드데 필요한 최소한의 연한 횟수
	DP[N] = DP[N] + min(rec(n-1), rec(n/2), rec(n/3)) + 1 (if x % 3 == 0 && x % 2 ==0)
		  = DP[N] + min(rec(n-1), rec(n/2)) + 1 (if x % 2 == 0)
		  = DP[N] + min(rec(n-1), rec(3/n)) + 1 (if x % 3 == 0)
		  = DP[N] + rec(n-1) + 1                (else)
	
package SortingAlgorithm;

import java.io.*;
import java.util.*;


public class Main {

    final static int MAX_SIZE = (int)Math.pow(10, 6) + 1;
    final static int NOT_VISIT = (int)Math.pow(10,7);
    static int[] dp;

    public static void main(String args[]) throws Exception{

        dp = new int[MAX_SIZE];

        FastScanner fs = new FastScanner();

        int input = fs.nextInt();
		
		dp = new int[input];
		Arrays.fill(dp, NOT_VISIT);
		
        int smaller = rec(input);

        System.out.println(smaller);
    }

    public static int rec(int idx) {

        if(idx == 1) return 0;

        if(dp[idx] != NOT_VISIT) return dp[idx];

        dp[idx] = Math.min(dp[idx], rec(idx - 1) + 1);
        if(idx % 3 == 0) dp[idx] = Math.min(dp[idx], rec(idx / 3) + 1);
        if(idx % 2 == 0) dp[idx] = Math.min(dp[idx], rec(idx/2) + 1);

        return dp[idx];
    }
}

class FastScanner {

    private BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    private StringTokenizer st;

    public int nextInt() throws Exception {
        if(st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());
        return Integer.parseInt(st.nextToken());
    }

    public long nextLong() throws Exception {
        if(st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());
        return Long.parseLong(st.nextToken());
    }

    public String nextLine() throws Exception {
        if(st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());
        return st.nextToken();
    }
}

	
	
	