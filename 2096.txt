내려가기 성공 

문제
N줄에 0 이상 9 이하의 숫자가 세 개씩 적혀 있다. 내려가기 게임을 하고 있는데, 이 게임은 첫 줄에서 시작해서 마지막 줄에서 끝나게 되는 놀이이다.

먼저 처음에 적혀 있는 세 개의 숫자 중에서 하나를 골라서 시작하게 된다. 그리고 다음 줄로 내려가는데, 다음 줄로 내려갈 때에는 다음과 같은 제약 조건이 있다. 
바로 아래의 수로 넘어가거나, 아니면 바로 아래의 수와 붙어 있는 수로만 이동할 수 있다는 것이다. 이 제약 조건을 그림으로 나타내어 보면 다음과 같다.

 <왼쪽>               < 중간 >          <오른쪽>
☆  ㅁ  ㅁ            ㅁ  ☆  ㅁ         ㅁ  ㅁ  ☆
ㅇ  ㅇ  _            ㅇ  ㅇ  ㅇ         ㅁ  ㅇ  ㅇ

별표는 현재 위치이고, 그 아랫 줄의 파란 동그라미는 원룡이가 다음 줄로 내려갈 수 있는 위치이며, 빨간 가위표는 원룡이가 내려갈 수 없는 위치가 된다. 
숫자표가 주어져 있을 때, 얻을 수 있는 최대 점수, 최소 점수를 구하는 프로그램을 작성하시오. 점수는 원룡이가 위치한 곳의 수의 합이다.

입력
첫째 줄에 N(1 ≤ N ≤ 100,000)이 주어진다. 다음 N개의 줄에는 숫자가 세 개씩 주어진다. 숫자는 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 중의 하나가 된다.

출력
첫째 줄에 얻을 수 있는 최대 점수와 최소 점수를 띄어서 출력한다.

예제 입력 1  복사
3
1 2 3
4 5 6
4 9 0
예제 출력 1  복사
18 6


PS:
	* [N][3] 크기의 배열을 만들지않고 단순히 변수를 이용해서도 풀 수 있지만 전체 배열을 만들어서 풀었다.
	* 메모이제이션을 통해 각 maxDP, minDP에서 LEFT, MID, RIGHT 를 선택했을 때 얻을 수 있는 최대/최소 값을 저장한다.
	* 반복문을 통해 각 maxDP, maxDP에서 LEFT, MID, RIGHT 를 선택했을 떄 얻을 수 있는 최대/최소 값을 계산한다.
	* N 번은 자기자신이 최대/최소값이므로 N-1열부터 최대/최소를 구한다.
	
  *** 난독을 조심하기 바란다. 난 min, max 구분을 못해서 두번이나 틀렸다..
  
import java.io.*;
import java.util.*;

public class Main {
    static final int LEFT = 0, MID = 1, RIGHT = 2;
    static int[][] maxDp, minDp;
    static int N, M;

    public static void main(String args[]) throws Exception {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        N = Integer.parseInt(br.readLine());

        maxDp = new int[N][3];
        minDp = new int[N][3];

        StringTokenizer st = null;

        for(int i = 0; i < N; ++i) {
            st = new StringTokenizer(br.readLine());
            for(int j = 0; j < 3; ++j)
                minDp[i][j] = maxDp[i][j] = Integer.parseInt(st.nextToken());
        }


        for(int i = N - 2; i >= 0; --i) {

            minDp[i][LEFT] += Math.min(minDp[i+1][LEFT], minDp[i+1][MID]);
            minDp[i][RIGHT] += Math.min(minDp[i+1][RIGHT], minDp[i+1][MID]);
            minDp[i][MID] += Math.min(minDp[i+1][LEFT], Math.min(minDp[i+1][MID], minDp[i+1][RIGHT]));


            maxDp[i][LEFT] += Math.max(maxDp[i+1][LEFT], maxDp[i+1][MID]);
            maxDp[i][RIGHT] += Math.max(maxDp[i+1][RIGHT], maxDp[i+1][MID]);
            maxDp[i][MID] += Math.max(maxDp[i+1][LEFT], Math.max(maxDp[i+1][MID], maxDp[i+1][RIGHT]));
        }

        int max = Math.max(maxDp[0][LEFT], Math.max(maxDp[0][RIGHT], maxDp[0][MID]));
        int min = Math.min(minDp[0][LEFT], Math.min(minDp[0][RIGHT], minDp[0][MID]));

        bw.write(max + " " + min + "\n");
        bw.flush();
    }
}