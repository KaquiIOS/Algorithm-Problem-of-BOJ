점프 성공 한국어   

문제
N×N 게임판에 수가 적혀져 있다. 이 게임의 목표는 가장 왼쪽 위 칸에서 가장 오른쪽 아래 칸으로 규칙에 맞게 점프를 해서 가는 것이다.

각 칸에 적혀있는 수는 현재 칸에서 갈 수 있는 거리를 의미한다. 반드시 오른쪽이나 아래쪽으로만 이동해야 한다. 0은 더 이상 진행을 막는 종착점이며, 항상 현재 칸에 적혀있는 수만큼 오른쪽이나 아래로 가야 한다. 한 번 점프를 할 때, 방향을 바꾸면 안된다. 즉, 한 칸에서 오른쪽으로 점프를 하거나, 아래로 점프를 하는 두 경우만 존재한다.

가장 왼쪽 위 칸에서 가장 오른쪽 아래 칸으로 규칙에 맞게 이동할 수 있는 경로의 개수를 구하는 프로그램을 작성하시오.

입력
첫째 줄에 게임 판의 크기 N (4 ≤ N ≤ 100)이 주어진다. 그 다음 N개 줄에는 각 칸에 적혀져 있는 수가 N개씩 주어진다. 칸에 적혀있는 수는 0보다 크거나 같고, 9보다 작거나 같은 정수이며, 가장 오른쪽 아래 칸에는 항상 0이 주어진다.

출력
가장 왼쪽 위 칸에서 가장 오른쪽 아래 칸으로 문제의 규칙에 맞게 갈 수 있는 경로의 개수를 출력한다. 경로의 개수는 263-1보다 작거나 같다.

예제 입력 1  복사
4
2 3 3 1
1 2 1 3
1 2 3 1
3 1 1 0
예제 출력 1  복사
3


PS:
	* 메모이제이션을 통해 (I,J) 에서 (N,N)으로 가는 경로의 수 기록
	* 재귀를 통해 (I,J) 에서 (N,N)으로 가는 경로의 수 계산
	* 이동할 때 다음 위치가 보드 범위를 벗어나면 움직이지 않는다.
	* 처음에 DP[N][N] = 1 로 설정하여 예외처리를 줄였다.
	

package SortingAlgorithm;

import java.io.*;
import java.util.*;

public class Main {
    static final int NOT_VISIT = -1;
    static long[][] dp;
    static int[][] jump;
    static int N;
    static int[] dx = {1, 0}, dy = {0, 1};

    public static void main(String args[]) throws Exception {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        N = Integer.parseInt(br.readLine());

        dp = new long[N][N];
        jump = new int[N][N];

        StringTokenizer st = null;

        for(int i = 0; i < N; ++i) {
            st = new StringTokenizer(br.readLine());
            for(int j = 0; j < N; ++j) {
                jump[i][j] = Integer.parseInt(st.nextToken());
                dp[i][j] = NOT_VISIT;
            }
        }

        dp[N-1][N-1] = 1;

        bw.write(rec(0, 0) + "\n");
        bw.flush();
    }

    public static long rec(int n, int m) {

        if(dp[n][m] != NOT_VISIT) return dp[n][m];

        dp[n][m] = 0;

        for(int i = 0; i < 2; ++i) {
            int nx = n + dx[i] * jump[n][m];
            int ny = m + dy[i] * jump[n][m];

            if(nx < 0 || N <= nx || ny < 0 || N <= ny) continue;

            dp[n][m] = dp[n][m] + rec(nx,ny);
        }
        return dp[n][m];
    }
}

