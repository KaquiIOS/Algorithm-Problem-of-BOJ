줄 세우기 성공 스페셜 저지 

문제
N명의 학생들을 키 순서대로 줄을 세우려고 한다. 
각 학생의 키를 직접 재서 정렬하면 간단하겠지만, 마땅한 방법이 없어서 두 학생의 키를 비교하는 방법을 사용하기로 하였다. 
그나마도 모든 학생들을 다 비교해 본 것이 아니고, 일부 학생들의 키만을 비교해 보았다.

일부 학생들의 키를 비교한 결과가 주어졌을 때, 줄을 세우는 프로그램을 작성하시오.

입력
첫째 줄에 N(1≤N≤32,000), M(1≤M≤100,000)이 주어진다. M은 키를 비교한 회수이다. 
다음 M개의 줄에는 키를 비교한 두 학생의 번호 A, B가 주어진다. 이는 학생 A가 학생 B의 앞에 서야 한다는 의미이다.

학생들의 번호는 1번부터 N번이다.

출력
첫째 줄부터 앞에서부터 줄을 세운 결과를 출력한다. 답이 여러 가지인 경우에는 아무거나 출력한다.

예제 입력 1  복사
3 2
1 3
2 3
예제 출력 1  복사
1 2 3
예제 입력 2  복사
4 2
4 2
3 1
예제 출력 2  복사
4 2 3 1

PS:
	* 순서가 필요한 작업이라서 위상정렬 알고리즘 사용
	* 사이클이 생기는 경우는 문제에서 없다고 했지만 그냥 임의로 넣어봄


import java.io.*;
import java.util.*;

public class Main {

    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    static int N, M;

    static int[] inDgree = new int[32001];
    static int[] sortedGraph = new int[32001];
    static ArrayList<Integer>[] DAG = new ArrayList[32001];

    public static void main(String args[]) throws Exception {

        br = new BufferedReader(new InputStreamReader(System.in));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        st = new StringTokenizer(br.readLine());

        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());

        for(int i = 0; i <= N; ++i)
            DAG[i] = new ArrayList<>();

        for(int i = 0; i < M; ++i) {
            st = new StringTokenizer(br.readLine());
            // 진입 차수 증가
            int A = Integer.parseInt(st.nextToken());
            int B = Integer.parseInt(st.nextToken());
            inDgree[A]++;
            // 그래프 입력
            DAG[B].add(A);
        }

        // 진입 차수 0 저장 큐
        Queue<Integer> q = new ArrayDeque<>();

        int pos = 0;

        // 진입 차수가 0인 녀석들 넣어주기
        for(int i = 1; i <= N; ++i) {
            if (inDgree[i] == 0) {
                q.add(i);
                sortedGraph[pos++] = i;
            }
        }

        boolean hasCycle = false;

        for(int i = 1; i <= N; ++i) {
            // 사이클이 없다면 큐에서 딱 N번 원소를 뺄 수 있음
            if(q.isEmpty()) {
                hasCycle = true;
                break;
            }
            // 다음 작업 위치 poll
            int next = q.poll();

            Iterator<Integer> it = DAG[next].iterator();

            while(it.hasNext()) {
                // 다음 작업 진입차수 줄이기
                int node = it.next();
                // 진입차수가 0이 되었다면 Queue에 추가
                if(--inDgree[node] == 0) {
                    q.add(node);
                    sortedGraph[pos++] = node;
                }
            }
        }

        if(hasCycle) {
            bw = new BufferedWriter(new OutputStreamWriter(System.out));
            bw.write("This graph is not DAG");
        } else {
            for(int i = pos - 1; i >= 0; --i)
                bw.write(sortedGraph[i] + " ");
        }
        bw.write("\n");
        bw.flush();
    }
}