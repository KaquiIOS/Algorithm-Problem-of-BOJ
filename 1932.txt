정수 삼각형 한국어   

문제
        7
      3   8
    8   1   0
  2   7   4   4
4   5   2   6   5
위 그림은 크기가 5인 정수 삼각형의 한 모습이다.

맨 위층 7부터 시작해서 아래에 있는 수 중 하나를 선택하여 아래층으로 내려올 때, 이제까지 선택된 수의 합이 최대가 되는 경로를 구하는 프로그램을 작성하라. 
아래층에 있는 수는 현재 층에서 선택된 수의 대각선 왼쪽 또는 대각선 오른쪽에 있는 것 중에서만 선택할 수 있다.

삼각형의 크기는 1 이상 500 이하이다. 삼각형을 이루고 있는 각 수는 모두 정수이며, 범위는 0 이상 9999 이하이다.

입력
첫째 줄에 삼각형의 크기 n(1 ≤ n ≤ 500)이 주어지고, 둘째 줄부터 n+1줄까지 정수 삼각형이 주어진다.

출력
첫째 줄에 합이 최대가 되는 경로에 있는 수의 합을 출력한다.

예제 입력 1  복사
5
7
3 8
8 1 0
2 7 4 4
4 5 2 6 5
예제 출력 1  복사
30


PS:
	* 메모이제이션을 통해 각 경로에서 얻을 수 있는 최댓값을 기록.
	* 재귀를 통해 각 경로에서 얻을 수 있는 최댓값을 계산.
	* 맨 왼쪽의 경우 왼쪽으로 내려가는 경로 i-1 이 아니라 i 이다.
	* 맨 아래 열까지 내려간 경우 바로 해당 지역의 값을 바로 return. (더 내려갈 경로가 없으니 자기자신이 최댓값)
	* 모든 cost를 9999로 잡고 삼각형의 크기가 500이라고 계산하면 500만정도이다. 충분히 int로 커버가능
	
점화식:
	DP[N][M] = max(DP[N][M], max(rec(N, M+1), rec(N+1, M+1)) + step[N][M])
	
	

import java.io.*;
import java.util.*;


public class Main {

    final static int NOT_VISIT = -1;
    final static int MOD = 10007;
    static int[][] dp, cost;
    static int N;

    public static void main(String args[]) throws Exception {

        FastScanner fs = new FastScanner();

        N = fs.nextInt();

        dp = new int[N][N];
        cost = new int[N][N];

        for (int i = 0; i < N; ++i) {
            for (int j = 0; j <= i; ++j) {
                cost[i][j] = fs.nextInt();
                dp[i][j] = NOT_VISIT;
            }
        }

        OutputStream out = new BufferedOutputStream(System.out);

        int ans = rec(0, 0);

        out.write((ans + "\n").getBytes());

        out.flush();
    }

    public static int rec(int row, int col) {

        if (row == N - 1) return cost[row][col];
        if (dp[row][col] != NOT_VISIT) return dp[row][col];

        dp[row][col] = cost[row][col];

        dp[row][col] = Math.max(dp[row][col], Math.max(rec(row + 1, col), rec(row + 1, col + 1)) + cost[row][col]);

        return dp[row][col];
    }
}

class FastScanner {

    private BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    private StringTokenizer st;

    public int nextInt() throws Exception {
        if (st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());
        return Integer.parseInt(st.nextToken());
    }

    public long nextLong() throws Exception {
        if (st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());
        return Long.parseLong(st.nextToken());
    }

    public String nextLine() throws Exception {
        if (st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());
        return st.nextToken();
    }
}
