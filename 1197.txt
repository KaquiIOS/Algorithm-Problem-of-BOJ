최소 스패닝 트리 성공 

문제
그래프가 주어졌을 때, 그 그래프의 최소 스패닝 트리를 구하는 프로그램을 작성하시오.

최소 스패닝 트리는, 주어진 그래프의 모든 정점들을 연결하는 부분 그래프 중에서 그 가중치의 합이 최소인 트리를 말한다.

입력
첫째 줄에 정점의 개수 V(1 ≤ V ≤ 10,000)와 간선의 개수 E(1 ≤ E ≤ 100,000)가 주어진다. 
다음 E개의 줄에는 각 간선에 대한 정보를 나타내는 세 정수 A, B, C가 주어진다. 
이는 A번 정점과 B번 정점이 가중치 C인 간선으로 연결되어 있다는 의미이다. 
C는 음수일 수도 있으며, 절대값이 1,000,000을 넘지 않는다.

최소 스패닝 트리의 가중치가 -2147483648보다 크거나 같고, 2147483647보다 작거나 같은 데이터만 입력으로 주어진다.

출력
첫째 줄에 최소 스패닝 트리의 가중치를 출력한다.

예제 입력 1  복사
3 3
1 2 1
2 3 2
1 3 3
예제 출력 1  복사
3

PS:
	* Kruskal 알고리즘을 이용하여 MST 를 만든다.
	* Prioirty Queue를 이용하여 간선의 정렬을 더욱 빠르게 수행한다.
	* 사이클 발생 유무는 Union-Find 알고리즘을 이용하여 확인한다.
	* 간선이 V - 1개만 채택되도록 예외처리를 한다.


import java.io.*;
import java.util.*;

public class Main {

    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    static int V,E;

    static int[] cities = new int[10001];

    static class Edge implements Comparable<Edge>{
        int start;
        int end;
        int cost;

        public Edge(int _start, int _end, int _cost) {
            start = _start;
            end = _end;
            cost = _cost;
        }

        @Override
        public int compareTo(Edge o) {
            return cost > o.cost ? 1 : cost == o.cost ? 0 : -1;
        }
    }

    public static void main(String args[]) throws Exception {

        br = new BufferedReader(new InputStreamReader(System.in));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        st = new StringTokenizer(br.readLine());

        V = Integer.parseInt(st.nextToken());
        E = Integer.parseInt(st.nextToken());

        PriorityQueue<Edge> priorityQueue = new PriorityQueue<>();

        for(int i = 1; i <= V; ++i)
            cities[i] = i;

        for(int i = 0; i < E; ++i) {
            st = new StringTokenizer(br.readLine());

            int s = Integer.parseInt(st.nextToken());
            int e = Integer.parseInt(st.nextToken());
            int cost = Integer.parseInt(st.nextToken());

            priorityQueue.add(new Edge(s,e,cost));
        }

        int sum = 0;
        int cnt = 0;
        for(int i = 0; i < E && cnt < V - 1; i++) {

            Edge e = priorityQueue.poll();

            if(unionParent(e.start, e.end)) {
                sum += e.cost;
                cnt++;
            }
        }

        bw.write(sum + "\n");
        bw.flush();
    }

    public static int findParent(int n) {
        if(cities[n] == n) return n;
        return cities[n] = findParent(cities[n]);
    }

    public static boolean unionParent(int n1, int n2) {

        n1 = findParent(n1);
        n2 = findParent(n2);

        if(n1 != n2) {
            if(n1 < n2) cities[n2] = n1;
            else cities[n1] = n2;
            return true;
        }
        return false;
    }
}




