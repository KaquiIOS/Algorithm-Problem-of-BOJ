집합의 표현 성공 스페셜 저지 

문제
초기에 {0}, {1}, {2}, ... {n} 이 각각 n+1개의 집합을 이루고 있다. 
여기에 합집합 연산과, 두 원소가 같은 집합에 포함되어 있는지를 확인하는 연산을 수행하려고 한다.

집합을 표현하는 프로그램을 작성하시오.

입력
첫째 줄에 n(1≤n≤1,000,000), m(1≤m≤100,000)이 주어진다. m은 입력으로 주어지는 연산의 개수이다. 
다음 m개의 줄에는 각각의 연산이 주어진다. 합집합은 0 a b의 형태로 입력이 주어진다. 
이는 a가 포함되어 있는 집합과, b가 포함되어 있는 집합을 합친다는 의미이다. 
두 원소가 같은 집합에 포함되어 있는지를 확인하는 연산은 1 a b의 형태로 입력이 주어진다. 
이는 a와 b가 같은 집합에 포함되어 있는지를 확인하는 연산이다. a와 b는 n 이하의 자연수또는 0이며 같을 수도 있다.

출력
1로 시작하는 입력에 대해서 한 줄에 하나씩 YES/NO로 결과를 출력한다. (yes/no 를 출력해도 된다)

예제 입력 1  복사
7 8
0 1 3
1 1 7
0 7 6
1 7 1
0 3 7
0 4 2
0 1 1
1 1 1
예제 출력 1  복사
NO
NO
YES

PS:
	* Union - Find 알고리즘을 이용하여 문제 풀이



import java.io.*;
import java.util.*;

public class Main {
    
    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    static int[] set = new int[1000001];

    static int N, M;

    public static void main(String args[]) throws Exception {

        br = new BufferedReader(new InputStreamReader(System.in));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        st = new StringTokenizer(br.readLine());

        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());

        for(int i= 1; i <= N; ++i)
            set[i] = i;

        for(int i= 0; i < M; ++i) {
            st = new StringTokenizer(br.readLine());

            int mode = Integer.parseInt(st.nextToken());
            int n = Integer.parseInt(st.nextToken());
            int m = Integer.parseInt(st.nextToken());

            if(mode == 0) {
                unionParent(n, m);
            } else {
                bw.write(compareParent(n,m) ? "YES\n" : "NO\n");
            }
        }
        bw.flush();

        for(int i = 1; i <= N; ++i)
            System.out.println(set[i]);
    }

    // n번 노드의 부모를 재귀적으로 탐색
    public static int getParent(int n) {
        if(set[n] == n) return n;
        return set[n] = getParent(set[n]);
    }

    // 각 노드를 연결한다.
    public static void unionParent(int n, int m) {
        int nP = getParent(n);
        int mP = getParent(m);

        if(nP > mP) set[nP] = mP;
        else set[mP] = nP;
    }

    // 두 노드의 부모가 같은지 비교한다.
    public static boolean compareParent(int n, int m) {

        int nP = getParent(n);
        int mP = getParent(m);

        return (nP == mP);
    }
}