RGB거리 (최대 최소를 잘못구분해 한 번 틀림)

문제
RGB거리에 사는 사람들은 집을 빨강, 초록, 파랑중에 하나로 칠하려고 한다. 또한, 그들은 모든 이웃은 같은 색으로 칠할 수 없다는 규칙도 정했다. 집 i의 이웃은 집 i-1과 집 i+1이다. 처음 집과 마지막 집은 이웃이 아니다.

각 집을 빨강으로 칠할 때 드는 비용, 초록으로 칠할 때 드는 비용, 파랑으로 드는 비용이 주어질 때, 모든 집을 칠할 때 드는 비용의 최솟값을 구하는 프로그램을 작성하시오.

입력
첫째 줄에 집의 수 N이 주어진다. N은 1,000보다 작거나 같다. 둘째 줄부터 N개의 줄에 각 집을 빨강으로 칠할 때, 초록으로 칠할 때, 파랑으로 칠할 때 드는 비용이 주어진다. 비용은 1,000보다 작거나 같은 자연수이다.

출력
첫째 줄에 모든 집을 칠할 때 드는 비용의 최솟값을 출력한다.

예제 입력 1  복사
3
26 40 83
49 60 57
13 89 99
예제 출력 1  복사
96


PS:
	* 매모이제이션을 통해 N번 집을 칠하는 최소 비용을 기록
	* 이웃한 집과 같은 색을 사용하면 안되기에 color 변수를 이용하여 이웃과 같은 색을 칠할 수 없게 설정.
	* 다행이 맨 마지막 집과 처음 집이 이어져있지 않다.
	* 재귀를 통해 각 집을 칠할 때 드는 최소 비용 계산.
	
	
점화식:
	DP[N] = min(DP[N], rec(n+1, Green) + color[n][Red], rec(n+1, Blue) + color[n][Red]) if(currentColor == Red)
		  = min(DP[N], rec(n+1, Red) + color[n][Blue], rec(n+1, Green) + color[n][Blue]) if(currentColor == Blue)
		  = min(DP[N], rec(n+1, Red) + color[n][Green], rec(n+1, Blue) + color[n][Green]) if(currentColor == Green)
		  
		  
import java.io.*;
import java.util.*;


public class Main {

    final static int RED = 0, GREEN = 1, BLUE = 2;
    final static int NOT_VISIT = (int)Math.pow(10,7);
    static int[][] color, dp;
    static int N;

    public static void main(String args[]) throws Exception{

        FastScanner fs = new FastScanner();

        N = fs.nextInt();

        color = new int[N][3];
        dp = new int[N][3];

        for(int i = 0; i < N; ++i) {
            color[i][RED] = fs.nextInt();
            color[i][GREEN] = fs.nextInt();
            color[i][BLUE] = fs.nextInt();
            Arrays.fill(dp[i], NOT_VISIT);
        }

        int min = Math.min(rec(0, RED), Math.min(rec(0, GREEN), rec(0, BLUE)));

        System.out.println(min);
    }

    public static int rec(int n, int curColor) {

        if(n == N - 1) return color[n][curColor];

        if(dp[n][curColor] != NOT_VISIT) return dp[n][curColor];

        switch (curColor) {
            case RED:
                dp[n][curColor] = Math.min(dp[n][curColor], Math.min(rec(n+1,BLUE), rec(n+1,GREEN)) + color[n][curColor]);
                break;
            case GREEN:
                dp[n][curColor] = Math.min(dp[n][curColor], Math.min(rec(n+1,RED), rec(n+1,BLUE)) + color[n][curColor]);
                break;
            case BLUE:
                dp[n][curColor] = Math.min(dp[n][curColor], Math.min(rec(n+1,RED), rec(n+1,GREEN)) + color[n][curColor]);
                break;
        }
        return dp[n][curColor];
    }
}

class FastScanner {

    private BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    private StringTokenizer st;

    public int nextInt() throws Exception {
        if(st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());
        return Integer.parseInt(st.nextToken());
    }

    public long nextLong() throws Exception {
        if(st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());
        return Long.parseLong(st.nextToken());
    }

    public String nextLine() throws Exception {
        if(st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());
        return st.nextToken();
    }
}
