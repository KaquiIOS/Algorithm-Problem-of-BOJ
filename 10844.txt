쉬운 계단 수 

문제
45656이란 수를 보자.

이 수는 인접한 모든 자리수의 차이가 1이 난다. 이런 수를 계단 수라고 한다.

세준이는 수의 길이가 N인 계단 수가 몇 개 있는지 궁금해졌다.

N이 주어질 때, 길이가 N인 계단 수가 총 몇 개 있는지 구하는 프로그램을 작성하시오. (0으로 시작하는 수는 없다.)

입력
첫째 줄에 N이 주어진다. N은 1보다 크거나 같고, 100보다 작거나 같은 자연수이다.

출력
첫째 줄에 정답을 1,000,000,000으로 나눈 나머지를 출력한다.

예제 입력 1  복사
1
예제 출력 1  복사
9
예제 입력 2  복사
2
예제 출력 2  복사
17

PS:
	* 메모이제이션을 통해 마지막수가 0-9인 계단수를 기록한다.
	* 재귀를 통해 마지막수가 0-9인 계단수를 계산한다.
	* 마지막 11번째 배열엔 마지막 수가 0-9인 계단수의 개수의 합을 저장. (미구현)
	* 0을 제외한 한자리숫자는 전부다 계단수.
	* 마지막 수가 0인 계단수는 0이 앞으로 올 수 없기때문에 DP[N-1][1] 에 0을 붙인 값만 존재한다.
	* 마지막 수가 9인 계단수는 8뒤에만 붙을 수 있기때문에 DP[N-1][8] 에 9를 붙인 값만 존재한다.
	* MOD 계산 필수 !
	
점화식:
	DP[N][I] = (DP[N-1][I-1] % MOD + DP[N-1][I+1] % MOD) % MOD if(1 <= I <= 8)
			 = DP[N-1][I+1] if(I == 0)
			 = DP[N-1][I-1] if(I == 9)
			 

import java.io.*;
import java.util.*;


public class Main {

    final static int MOD = 1000000000;
    static long[] dp, tmp, temp;
    static int N;

    public static void main(String args[]) throws Exception {

        FastScanner fs = new FastScanner();

        N = fs.nextInt();

        dp = new long[10];
        tmp = new long[10];

        Arrays.fill(dp, 1);

        dp[0] = 0;

        for(int i = 1; i < N; ++i) {
            for(int j = 0; j < 10; ++j) {
                if(j == 0)  tmp[j] = dp[1] % MOD;
                else if(j == 9) tmp[j] = dp[8] % MOD;
                else tmp[j] = (dp[j-1] % MOD + dp[j+1] % MOD) % MOD;
            }
            temp = dp;
            dp = tmp;
            tmp = temp;
        }

        long ans = 0;

        for(int i = 0; i < 10; ++i)
            ans = (ans % MOD + dp[i] % MOD) % MOD;

        System.out.println(ans);
    }
}

class FastScanner {

    private BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    private StringTokenizer st;

    public int nextInt() throws Exception {
        if (st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());
        return Integer.parseInt(st.nextToken());
    }

    public long nextLong() throws Exception {
        if (st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());
        return Long.parseLong(st.nextToken());
    }

    public String nextLine() throws Exception {
        if (st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());
        return st.nextToken();
    }
}

			 
			 
			 