Strongly Connected Component 성공
시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
2 초	128 MB	2402	1120	613	43.139%
문제
방향 그래프가 주어졌을 때, 그 그래프를 SCC들로 나누는 프로그램을 작성하시오.

방향 그래프의 SCC는 우선 정점의 최대 부분집합이며, 
그 부분집합에 들어있는 서로 다른 임의의 두 정점 u, v에 대해서 u에서 v로 가는 경로와 v에서 u로 가는 경로가 모두 존재하는 경우를 말한다.

↗↙↖↘ → ←	↑↓
    
	A → B → C ↔ D
    ↑ ↙ ↓   ↓   ↓
	E → F ↔ G → H ↘
				↖↙

예를 들어 위와 같은 그림을 보자. 이 그래프에서 SCC들은 {a, b, e}, {c, d}, {f, g}, {h} 가 있다. 
물론 h에서 h로 가는 간선이 없는 경우에도 {h}는 SCC를 이룬다.

입력
첫째 줄에 두 정수 V(1≤V≤10,000), E(1≤E≤100,000)가 주어진다. 
이는 그래프가 V개의 정점과 E개의 간선으로 이루어져 있다는 의미이다. 
다음 E개의 줄에는 간선에 대한 정보를 나타내는 두 정수 A, B가 주어진다. 
이는 A번 정점과 B번 정점이 연결되어 있다는 의미이다. 이 때 방향은 A->B가 된다.

출력
첫째 줄에 SCC의 개수를 K를 출력한다. 다음 K개의 줄에는 각 줄에 하나의 SCC에 속한 정점의 번호를 출력한다. 
각 줄의 끝에는 -1을 출력하여 그 줄의 끝을 나타낸다. 
각각의 SCC를 출력할 때 그 안에 속한 정점들은 오름차순으로 출력한다. 
또한 여러 개의 SCC에 대해서는 그 안에 속해있는 가장 작은 정점의 정점 번호 순으로 출력한다.

예제 입력 1 
7 9
1 4
4 5
5 1
1 6
6 7
2 7
7 3
3 7
7 2
예제 출력 1 
3
1 4 5 -1
2 3 7 -1
6 -1


PS:
	* 코사라주 알고리즘과 타잔 알고리즘을 이용해 풀이
	
	
< 코사라주 알고리즘 >

import java.io.*;
import java.util.*;

public class Main {

    static StringBuilder sb;
    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    static int V, E, numOfSCC;
    static ArrayList<Integer>[] gr = new ArrayList[10001], agr = new ArrayList[10001];
    static ArrayList<Integer> SCC = null;
    static boolean[] isVisited = new boolean[10001];
    static Stack<Integer> stack = new Stack<>();

    public static void main(String args[]) throws Exception {

        br = new BufferedReader(new InputStreamReader(System.in));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));
        sb = new StringBuilder();

        st = new StringTokenizer(br.readLine());
        V = Integer.parseInt(st.nextToken());
        E = Integer.parseInt(st.nextToken());

        // 정방향, 역방향 그래프
        for(int i = 0; i <= V; ++i) {
            gr[i] = new ArrayList<>();
            agr[i] = new ArrayList<>();
        }

        for(int i = 0; i < E; ++i) {
            st = new StringTokenizer(br.readLine());
            int s = Integer.parseInt(st.nextToken());
            int e = Integer.parseInt(st.nextToken());

            gr[s].add(e);
            agr[e].add(s);
        }

        // 각 정점에 대해 DFS 수행
        for(int i = 1; i <= V; ++i)
            if(!isVisited[i])
                DFS(i);

        // 방문 배열 초기화
        Arrays.fill(isVisited, 0, V + 1, false);

        PriorityQueue<ArrayList<Integer>> pq = new PriorityQueue<>(new Comparator<ArrayList<Integer>>() {
            @Override
            public int compare(ArrayList<Integer> o1, ArrayList<Integer> o2) {
                return o1.get(0) > o2.get(0) ? 1 : -1;
            }
        });

        while(!stack.isEmpty()) {
            int next = stack.pop();
            if(!isVisited[next]) {
                SCC = new ArrayList<>();
                DFSForSCC(next);
                SCC.sort(null);
                pq.add(SCC);
                numOfSCC++;
            }
        }

        bw.write(numOfSCC + "\n");

        for(int i = 0; i < numOfSCC; ++i) {
            SCC = pq.poll();
            int len = SCC.size();
            for(int j = 0; j < len; ++j)
                bw.write(SCC.get(j) + " ");
            bw.write("-1\n");
        }

        bw.flush();
    }

    public static void DFS(int node) {

        isVisited[node] = true;
        int len = gr[node].size();

        // 방문하지 않는 위치만 방문
        for(int i = 0; i < len; ++i)
            if(!isVisited[gr[node].get(i)])
                DFS(gr[node].get(i));

        // DFS가 끝나는 순서대로 STACK 넣기 ! 중요
        stack.add(node);
    }

    public static void DFSForSCC(int node) {

        isVisited[node] = true;
        SCC.add(node);

        int len = agr[node].size();

        for(int i = 0; i < len; ++i)
            if(!isVisited[agr[node].get(i)])
                DFSForSCC(agr[node].get(i));
    }
}

< 타잔 알고리즘 >

import java.io.*;
import java.util.*;

public class Main {

    static StringBuilder sb;
    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    static int V, E, numOfSCC, id = 1;
    static ArrayList<Integer>[] gr = new ArrayList[10001];
    static ArrayList<Integer> SCC = null;
    static int[] isVisited = new int[10001];
    static boolean[] check = new boolean[10001];
    static Stack<Integer> stack = new Stack<>();
    static PriorityQueue<ArrayList<Integer>> pq = null;

    public static void main(String args[]) throws Exception {

        br = new BufferedReader(new InputStreamReader(System.in));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));
        sb = new StringBuilder();

        st = new StringTokenizer(br.readLine());
        V = Integer.parseInt(st.nextToken());
        E = Integer.parseInt(st.nextToken());

        // 정방향, 역방향 그래프
        for(int i = 0; i <= V; ++i)
            gr[i] = new ArrayList<>();


        for(int i = 0; i < E; ++i) {
            st = new StringTokenizer(br.readLine());
            int s = Integer.parseInt(st.nextToken());
            int e = Integer.parseInt(st.nextToken());

            gr[s].add(e);
        }

        pq = new PriorityQueue<>(new Comparator<ArrayList<Integer>>() {
            @Override
            public int compare(ArrayList<Integer> o1, ArrayList<Integer> o2) {
                return o1.get(0) > o2.get(0) ? 1 : -1;
            }
        });

        // 각 정점에 대해 DFS 수행
        for(int i = 1; i <= V; ++i)
            if (isVisited[i] == 0)
                DFS(i);

        bw.write(numOfSCC + "\n");

        while(!pq.isEmpty()) {
            SCC = pq.poll();
            int len = SCC.size();
            for(int j = 0; j < len; ++j)
                bw.write(SCC.get(j) + " ");
            bw.write("-1\n");
        }

        bw.flush();
    }

    public static int DFS(int node) {

        // 방문 순서 부여하기
        isVisited[node] = id++;
        int temp = isVisited[node];
        int len = gr[node].size();

        stack.add(node);

        for(int i = 0; i < len; ++i) {
            int nextNode = gr[node].get(i);
            // 방문하지 않은 노드는 방문
            if(isVisited[nextNode] == 0)
                temp = Math.min(temp, DFS(nextNode));
            // 방문은 했는데 아지막 SCC에 포함되지 않은 노드는 낮은 방문 번호로 변경
            else if(!check[nextNode])
                temp = Math.min(temp, isVisited[nextNode]);
        }

        // 현재 노드가 포함된 SCC에서 가장 번호가 낮은 노드 == 현재 노드의 방문 번호이면
        // 현재 노드는 SCC의 시작지점이 된다.
        if(isVisited[node] == temp) {
            SCC = new ArrayList<>();
            while(true) {
                int nodeOfSCC = stack.pop();
                check[nodeOfSCC] = true;
                SCC.add(nodeOfSCC);
                // 현재지점까지 노드를 계속해서 SCC에 추가하기
                if(nodeOfSCC == node) break;
            }
            SCC.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer o2) {
                    return o1 > o2 ? 1 : o1 == o2 ? 0 : -1;
                }
            });
            pq.add(SCC);
            numOfSCC++;
        }
        return temp;
    }
}
