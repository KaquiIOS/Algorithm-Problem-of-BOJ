팰린드롬? 성공 

문제
명우는 홍준이와 함께 팰린드롬 놀이를 해보려고 한다.

먼저, 홍준이는 자연수 N개를 칠판에 적는다. 그 다음, 명우에게 질문을 총 M번 한다.

각 질문은 두 정수 S와 E로 나타낼 수 있으며, S번째 수부터 E번째 까지 수가 팰린드롬을 이루는지를 물어보며, 명우는 각 질문에 대해 팰린드롬이다 또는 아니다를 말해야 한다.

예를 들어, 홍준이가 칠판에 적은 수가 1, 2, 1, 3, 1, 2, 1라고 하자.

S = 1, E = 3인 경우 1, 2, 1은 팰린드롬이다.
S = 2, E = 5인 경우 2, 1, 3, 1은 팰린드롬이 아니다.
S = 3, E = 3인 경우 1은 팰린드롬이다.
S = 5, E = 7인 경우 1, 2, 1은 팰린드롬이다.
자연수 N개와 질문 M개가 모두 주어졌을 때, 명우의 대답을 구하는 프로그램을 작성하시오.

입력
첫째 줄에 수열의 크기 N (1 ≤ N ≤ 2,000)이 주어진다.

둘째 줄에는 홍준이가 칠판에 적은 수 N개가 순서대로 주어진다. 칠판에 적은 수는 100,000보다 작거나 같은 자연수이다.

셋째 줄에는 홍준이가 한 질문의 개수 M (1 ≤ M ≤ 1,000,000)이 주어진다.

넷째 줄부터 M개의 줄에는 홍준이가 명우에게 한 질문 S와 E가 한 줄에 하나씩 주어진다.

출력
총 M개의 줄에 걸쳐 홍준이의 질문에 대한 명우의 답을 입력으로 주어진 순서에 따라서 출력한다. 팰린드롬인 경우에는 1, 아닌 경우에는 0을 출력한다.

예제 입력 1  복사
7
1 2 1 3 1 2 1
4
1 3
2 5
3 3
5 7
예제 출력 1  복사
1
0
1
1


PS:
	* 메모이제이션을 통해 (S,E)가 펠린드롬인지 아닌지를 저장한다.
	* 반복문을 통해 (S,E)가 펠린드롬인지 아닌지 계산한다.
	* 먼저 펠린드롬인지 아닌지 확인하기위해 문제를 작게 나눠본다.
		
			1	2	1	3	1	2	1
			
		1	1	0	1	0	0	0	1
		
		2		1	0	0	0	1	0
		
		1			1	0	1	0	0
		
		3				1	0	0	0
		
		1					1	0	1
		
		2						1	0
								
		1							1

	가장 마지막 문자끼리 펠린드롬인지 아닌지 확인하면 자기자신이므로 펠린드롬이다.
	다음 긴 문자인 21이 펠린드롬인지 아닌지 확인하면 시작과 끝 문자가 다르다.
	다음 긴 문자인 121이 펠린드롬인지 아닌지 확인하면 시작과 끝이 같고 그 사이에 있는 2 문자열이 펠린드롬이므로 이는 펠린드롬이다.
	
	즉 여기서 보이는 것 처럼 
		1. 자기자신과는 펠린드롬이다.
		2. 길이가 2인 펠린드롬은 시작, 끝만 비교해보면 된다.
		3. 나머지는 시작과 끝이 같으며 && 시작과 끝을 뺀 문자열이 펠린드롬이면 펠린드롬, 둘 중 하나라도 적용되지 않으면 펠린드롬이 아니다.
		
	나는 계산을 편하게 하기위해 N번, N-1번을 미리 계산하고 N-2번문자부터 펠린드롬을 확인하였다.
	
	
점화식:
	DP[N][N] = 1
	DP[N][N+1] = (CHAR[N] == CHAR[N+1]) ? 1 : 0
	DP[I][J] = (CHAR[S] == CHAR[E] && DP[S+1][E-1] == 1) ? 1 : 0
	
	
import java.io.*;
import java.util.*;

public class Main {
    static int[][] dp;
    static int[] input;
    static int N, M;

    public static void main(String args[]) throws Exception {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        N = Integer.parseInt(br.readLine());

        dp = new int[N][N];
        input= new int[N];

        StringTokenizer st = new StringTokenizer(br.readLine());

        for(int i =  0; i < N; ++i)
            input[i] = Integer.parseInt(st.nextToken());

        dp[N-1][N-1] = 1;

        for(int i = N-2; i >= 0; --i) {
            dp[i][i] = 1;
            dp[i][i+1] = (input[i] == input[i+1] ? 1 : 0);
            for(int j = i + 2; j < N; ++j) {
                if((input[i] == input[j]) && dp[i + 1][j - 1] == 1)
                    dp[i][j] = 1;
            }
        }

        M = Integer.parseInt(br.readLine());

        while(M-- != 0) {

            st = new StringTokenizer(br.readLine());

            int S = Integer.parseInt(st.nextToken());
            int E = Integer.parseInt(st.nextToken());

            bw.write(dp[S-1][E-1] + "\n");
        }
        bw.flush();
    }
}
		