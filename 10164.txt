격자상의 경로 성공 

문제
행의 수가 N이고 열의 수가 M인 격자의 각 칸에 1부터 N×M까지의 번호가 첫 행부터 시작하여 차례로 부여되어 있다. 
격자의 어떤 칸은 ○ 표시가 되어 있다. (단, 1번 칸과 N × M번 칸은 ○ 표시가 되어 있지 않다. 또한, ○ 표시가 되어 있는 칸은 최대 한 개이다. 즉, ○ 표시가 된 칸이 없을 수도 있다.) 

행의 수가 3이고 열의 수가 5인 격자에서 각 칸에 번호가 1부터 차례대로 부여된 예가 아래에 있다. 
이 격자에서는 8번 칸에 ○ 표시가 되어 있다.

1	2	3	4	5
6	7	⑧   9	10
11	12	13	14	15


격자의 1번 칸에서 출발한 어떤 로봇이 아래의 두 조건을 만족하면서 N×M번 칸으로 가고자 한다. 

조건 1: 로봇은 한 번에 오른쪽에 인접한 칸 또는 아래에 인접한 칸으로만 이동할 수 있다. (즉, 대각선 방향으로는 이동할 수 없다.)
조건 2: 격자에 ○로 표시된 칸이 있는 경우엔 로봇은 그 칸을 반드시 지나가야 한다. 
위에서 보인 것과 같은 격자가 주어질 때, 로봇이 이동할 수 있는 서로 다른 경로의 두 가지 예가 아래에 있다.

1 → 2 → 3 → 8 → 9 → 10 → 15
1 → 2 → 3 → 8 → 13 → 14 → 15
격자에 관한 정보가 주어질 때 로봇이 앞에서 설명한 두 조건을 만족하면서 이동할 수 있는 서로 다른 경로가 총 몇 개나 되는지 찾는 프로그램을 작성하라. 

입력
입력의 첫째 줄에는 격자의 행의 수와 열의 수를 나타내는 두 정수 N과 M(1 ≤ N, M ≤ 15), 그리고 ○로 표시된 칸의 번호를 나타내는 정수 K(K=0 또는 1 < K < N×M)가 차례로 주어지며, 각 값은 공백으로 구분된다. K의 값이 0인 경우도 있는데, 이는 ○로 표시된 칸이 없음을 의미한다. N과 M이 동시에 1인 경우는 없다.

출력
주어진 격자의 정보를 이용하여 설명한 조건을 만족하는 서로 다른 경로의 수를 계산하여 출력해야 한다. 

예제 입력 1  복사
3 5 8
예제 출력 1  복사
9


PS:
	* 메모이제이션을 통해 (I,J) 에서 (N,M) 까지 가는 경로의 수 저장
	* 재귀를 통해 (I,J) 에서 (N,M) 까지 가는 경로의 수 계산
	* 반복문을 돌면서 cost 배열에 값을 입력할 때 K값을 행,열 값으로 변경한다.
	* K를 이용하여 계산한 중간 위치를 (I,J) 라고 하면 먼저 ((I,J) -> (N,M)) 경로의 수를 계산한 다음 ((0,0) -> (I,J)) 의 경로수를 구하고 두 값을 곱해준다.
	
점화식:
	DP[N][M] = REC(N+1,M) + REC(N,M+1) <재귀>
	DP[N][M] = DP[N+1][M] + DP[N][M+1] <반복>
	

import java.io.*;
import java.util.*;

public class Main {
    static final int NOT_VISIT = -1;
    static int[][] dp, cost;
    static int N, M, K;
    static int[] dx = {1, 0}, dy = {0, 1};

    public static void main(String args[]) throws Exception {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        StringTokenizer st = new StringTokenizer(br.readLine());

        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        K = Integer.parseInt(st.nextToken());

        dp = new int[N][M];
        cost = new int[N][M];

        int di = 0, dj = 0;

        for (int i = 0; i < N; ++i) {
            for (int j = 0; j < M; ++j) {
                dp[i][j] = NOT_VISIT;
                cost[i][j] = j + 1 + M * i;
                if(cost[i][j] == K) {
                    di = i;
                    dj = j;
                }
            }
        }

        int ans = rec(di, dj);

        N = di + 1; M = dj + 1;

        ans *= rec(0,0);

        bw.write(ans + "\n");
        bw.flush();
    }

    public static int rec(int i, int j) {

        if(i == N - 1&& j == M - 1) return 1;
        if (dp[i][j] != NOT_VISIT) return dp[i][j];

        dp[i][j] = 0;

        for(int k = 0; k < 2; ++k) {
            int nx = i + dx[k];
            int ny = j + dy[k];

            if(nx < 0 || ny < 0 || N <= nx || M <= ny) continue;
            dp[i][j] += rec(nx, ny);
        }
        return dp[i][j];
    }
}
	









