웜홀 성공 한국어   
시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
2 초	128 MB	3840	1313	840	32.000%
문제
때는 2020년, 백준이는 월드나라의 한 국민이다. 
월드 나라에는 N개의 지점이 있고 N개의 지점 사이에는 M개의 도로와 W개의 웜홀이 있다. (단 도로는 방향이 없으며 웜홀은 방향이 있다.) 
웜홀은 시작 위치에서 도착 위치로 가는 하나의 경로인데, 특이하게도 도착을 하게 되면 시작을 하였을 때 보다 시간이 뒤로 가게 된다. 
웜홀 내에서는 시계가 거꾸로 간다고 생각하여도 좋다.

시간 여행을 매우 좋아하는 백준이는 한 가지 궁금점에 빠졌다. 
1번 지점에서 출발을 하여서 시간여행을 하기 시작하여 다시 출발을 하였던 위치로 돌아왔을 때, 출발을 하였을 때 보다 시간이 되돌아 가 있는 경우가 있는지 없는지 궁금해졌다. 
여러분은 백준이를 도와 이런 일이 가능한지 불가능한지 구하는 프로그램을 작성하여라.

입력
첫번째 줄에는 테스트케이스의 개수 T(1≤T≤5)가 주어진다. 
그리고 두 번째 줄부터 T개의 테스트케이스가 차례로 주어지는데 각 테스트케이스의 
첫번째 줄에는 지점의 수 N(1≤N≤500), 도로의 개수 M(1≤M≤2500), 웜홀의 개수(1≤W≤200)이 주어진다. 
그리고 두번째 줄부터 M+1개의 줄까지 도로의 정보가 주어지는데 각 도로의 정보는 S,E,T 세 정수로 주어진다. 
S와 E는 연결된 지점의 번호, T는 이 도로를 통해 이동하는데 걸리는 시간을 의미한다. 
그리고 M+2~M+W+1번째 줄까지 웜홀의 정보가 S,E,T 세 정수로 주어지는데 S는 시작 지점, E는 도착 지점, T는 줄어드는 시간을 의미한다. 
T는 10,000보다 작거나 같은 자연수 또는 0이다.

두 지점을 연결하는 도로가 한 개보다 많을 수도 있다.

출력
T개의 줄에 걸쳐서 만약에 시간이 줄어들면서 출발 위치로 돌아오는 것이 가능하면 YES, 불가능하면 NO를 출력한다.

예제 입력 1  복사
2
3 3 1
1 2 2
1 3 4
2 3 1
3 1 3
3 2 1
1 2 3
2 3 4
3 1 8
예제 출력 1  복사
NO
YES


PS:
	* 벨만 포트 알고리즘으로 문제 풀이
	* 문제 조건을 몇 개 빠트려 먹어서 몇 번 틀렸다.
	* 1번 자리로 다시 돌아갈 수 있는가를 체크하는게 중요하다
		- 나같은 경우에는 웜홀의 도착점에서 1번까지의 경로를 탐색해서 경로가 존재하는 경우에만 YES를 출력함
		- 다른 사람들의 코드의 경우 각 지점에서 값이 갱신되는지만 확인하는 코드들이 많았는데 갱신되는 것만 확인해도 1로 가는 경로가 존재하는지 파악할 수 있는지 의문
		- 문제가 살짝쿵 이상하다고 질문 게시판에 올라와있는데 재채점이 되면 확인할 수 있을 듯
		
< 1번 코드 >

import java.io.*;
import java.util.*;

public class Main {

    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    static class Edge {
        int next;
        int cost;

        public Edge(int next, int cost) {
            this.next = next;
            this.cost = cost;
        }
    }

    static final int INF = 1987654321;
    static int T, V, E, W;
    static long[] dist = null;
    static ArrayList<Edge>[] adList = null;
    static ArrayList<Integer> warmhole = null;

    public static void main(String args[]) throws Exception {

        br = new BufferedReader(new InputStreamReader(System.in));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        T = Integer.parseInt(br.readLine());

        while (T-- != 0) {
            st = new StringTokenizer(br.readLine());

            V = Integer.parseInt(st.nextToken());
            E = Integer.parseInt(st.nextToken());
            W = Integer.parseInt(st.nextToken());

            dist = new long[V + 1];
            adList = new ArrayList[V + 1];
            warmhole = new ArrayList<>();

            for (int i = 0; i <= V; ++i) {
                adList[i] = new ArrayList<>();
                dist[i] = INF;
            }

            for (int i = 0; i < E; ++i) {
                st = new StringTokenizer(br.readLine());

                int s = Integer.parseInt(st.nextToken());
                int e = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());

                adList[s].add(new Edge(e, c));
                adList[e].add(new Edge(s, c));
            }

            for(int i = 0; i < W; ++i) {
                st = new StringTokenizer(br.readLine());

                int s = Integer.parseInt(st.nextToken());
                int e = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());

                adList[s].add(new Edge(e,-c));
                warmhole.add(e);
            }

            boolean isRelaxed = bellmanFord(1);
            // 음의 사이클이 존재하고 1로 가는 경로가 있으면 YES 인데..
            if(isRelaxed) {
                int len = warmhole.size();
                boolean c = false;
                for(int i = 0; i < len; ++i) {
                    c = checkPath(warmhole.get(i));
                    if(c) {
                        bw.write("YES\n");
                        break;
                    }
                }
                if(!c) bw.write("NO\n");
            } else
                bw.write("NO\n");
        }
        bw.flush();
    }

    public static boolean checkPath(int start) {

        if(start == 1) return true;

        Queue<Integer> q = new ArrayDeque<>();
        boolean[] checkArr = new boolean[V + 1];

        q.add(start);
        checkArr[start] = true;

        while(!q.isEmpty()) {

            int v = q.poll();

            int len = adList[v].size();

            for(int i = 0; i < len; ++i) {
                int next = adList[v].get(i).next;
                if(next == 1) return true;
                if(checkArr[next]) continue;
                checkArr[next] = true;
                q.add(next);              
            }
        }

        return checkArr[1];
    }

    public static boolean bellmanFord(int start) {

        // 시작점 0 설정
        dist[start] = 0;
        // 마지막에 Update가 된 경우엔 음의 사이클이 존재한다.
        boolean isRelaxed = false;

        for (int i = 1; i <= V; ++i) {
            isRelaxed = false;
            for (int j = 1; j <= V; ++j) {
                int len = adList[j].size();
                // 경로 최단거리 갱신
                for (int k = 0; k < len; ++k) {
                    if (dist[j] + adList[j].get(k).cost < dist[adList[j].get(k).next]) {
                        dist[adList[j].get(k).next] = dist[j] + adList[j].get(k).cost;
                        isRelaxed = true;
                    }
                }
            }
            // 갱신이 한번도 이뤄지지 않으면 최단거리 탐색 끝
            if (!isRelaxed) break;
        }
        // isRelaxed 가
        // True 인 경우 음의 사이클 존재
        // False 인 경우 최단거리 탐색 완료
        return isRelaxed;
    }
}

< 2번 코드 >

import java.io.*;
import java.util.*;

public class Main {

    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    static class Edge {
        int next;
        int cost;

        public Edge(int next, int cost) {
            this.next = next;
            this.cost = cost;
        }
    }

    static final int INF = 1987654321;
    static int T, V, E, W;
    static long[] dist = null;
    static ArrayList<Edge>[] adList = null;
    static ArrayList<Integer> warmhole = null;

    public static void main(String args[]) throws Exception {

        br = new BufferedReader(new InputStreamReader(System.in));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        T = Integer.parseInt(br.readLine());

        while (T-- != 0) {
            st = new StringTokenizer(br.readLine());

            V = Integer.parseInt(st.nextToken());
            E = Integer.parseInt(st.nextToken());
            W = Integer.parseInt(st.nextToken());

            dist = new long[V + 1];
            adList = new ArrayList[V + 1];
            warmhole = new ArrayList<>();

            for (int i = 0; i <= V; ++i) {
                adList[i] = new ArrayList<>();
                dist[i] = INF;
            }

            for (int i = 0; i < E; ++i) {
                st = new StringTokenizer(br.readLine());

                int s = Integer.parseInt(st.nextToken());
                int e = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());

                adList[s].add(new Edge(e, c));
                adList[e].add(new Edge(s, c));
            }

            for(int i = 0; i < W; ++i) {
                st = new StringTokenizer(br.readLine());

                int s = Integer.parseInt(st.nextToken());
                int e = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());

                adList[s].add(new Edge(e,-c));
                warmhole.add(e);
            }

            boolean isRelaxed = bellmanFord(1);
            bw.write(isRelaxed ? "YES\n" : "NO\n");
        }
        bw.flush();
    }

    public static boolean bellmanFord(int start) {

        // 시작점 0 설정
        dist[start] = 0;
        // 마지막에 Update가 된 경우엔 음의 사이클이 존재한다.
        boolean isRelaxed = false;

        for (int i = 1; i <= V; ++i) {
            isRelaxed = false;
            for (int j = 1; j <= V; ++j) {
                int len = adList[j].size();
                // 경로 최단거리 갱신
                for (int k = 0; k < len; ++k) {
                    if (dist[j] + adList[j].get(k).cost < dist[adList[j].get(k).next]) {
                        dist[adList[j].get(k).next] = dist[j] + adList[j].get(k).cost;
                        isRelaxed = true;
                    }
                }
            }
            // 갱신이 한번도 이뤄지지 않으면 최단거리 탐색 끝
            if (!isRelaxed) break;
        }

        if(isRelaxed) {

            for(int j = 1; j <= V; ++j) {
                int len = adList[j].size();
                for(int k = 0; k < len; ++k) {
                    if(dist[j] + adList[j].get(k).cost < dist[adList[j].get(k).next])
                        return true;
                }
            }

            return false;
        }

        // isRelaxed 가
        // True 인 경우 음의 사이클 존재
        // False 인 경우 최단거리 탐색 완료
        return isRelaxed;
    }
}