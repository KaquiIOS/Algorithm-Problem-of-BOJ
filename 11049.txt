행렬 곱셈 순서 성공 

문제
크기가 N×M인 행렬 A와 M×K인 B를 곱할 때 필요한 곱셈 연산의 수는 총 N×M×K번이다. 행렬 N개를 곱하는데 필요한 곱셈 연산의 수는 행렬을 곱하는 순서에 따라 달라지게 된다.

예를 들어, A의 크기가 5×3이고, B의 크기가 3×2, C의 크기가 2×6인 경우에 행렬의 곱 ABC를 구하는 경우를 생각해보자.

AB를 먼저 곱하고 C를 곱하는 경우 (AB)C에 필요한 곱셈 연산의 수는 5×3×2 + 5×2×6 = 30 + 60 = 90번이다.
BC를 먼저 곱하고 A를 곱하는 경우 A(BC)에 필요한 곱셈 연산의 수는 3×2×6 + 5×3×6 = 36 + 90 = 126번이다.
같은 곱셈이지만, 곱셈을 하는 순서에 따라서 곱셈 연산의 수가 달라진다.

행렬 N개의 크기가 주어졌을 때, 모든 행렬을 곱하는데 필요한 곱셈 연산 횟수의 최소값을 구하는 프로그램을 작성하시오. 입력으로 주어진 행렬의 순서를 바꾸면 안된다.

 

입력
첫째 줄에 행렬의 개수 N(1 ≤ N ≤ 500)이 주어진다.

둘째 줄부터 N개 줄에는 행렬의 크기 r과 c가 주어진다. (1 ≤ r, c ≤ 500)

항상 순서대로 곱셈을 할 수 있는 크기만 입력으로 주어진다.

출력
첫째 줄에 입력으로 주어진 행렬을 곱하는데 필요한 곱셈 연산의 최소값을 출력한다. 정답은 231-1 보다 작거나 같은 자연수이다. 또한, 최악의 순서로 연산해도 연산 횟수가 231-1보다 작거나 같다.

예제 입력 1  복사
3
5 3
3 2
2 6
예제 출력 1  복사
90


PS:
	* 너무나도 어려운 문제.. 고민하다가 해법이 생각나지 않아 다른 고수님의 풀이를 참조하였다. http://mygumi.tistory.com/258
	* 메모이제이션을 통해 I번에서 J번 까지 행렬의 최소 곱셈 연산의 수를 저장한다.
	* 반복문을 통해 I번에서 J번 까지 행렬의 최소 곱셈 연산의 수를 저장한다.
	* A, B, C, D 의 행렬이 있다고 가정하면
	
		- 길이가 2인 곱
			AB, BC, CD
		- 길이가 3인 곱
			(AB)C, A(BC), (BC)D
		- 길이가 4인 곱
			(ABC)D, A(BCD), (AB)(CD)
			
	  각 각의 경우에서 가질 수 있는 최소 곱셈 연산의 수를 계산한다.
	  
점화식:
	DP[I][J] = min(DP[I][J], DP[I][K] + DP[K + 1][J] + D[I-1] * D[K] * D[J])
	
	

import java.io.*;
import java.util.*;

public class Main {

    static final int NOT_VISIT = -1;
    static int[][] dp = new int[501][501];
    static int[] d = new int[1001];
    static int N;

    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    public static void main(String args[]) throws Exception {

        br = new BufferedReader(new InputStreamReader(System.in));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        N = Integer.parseInt(br.readLine());

        for (int i = 0; i < N; ++i) {
            st = new StringTokenizer(br.readLine());
            d[i] = Integer.parseInt(st.nextToken());
            d[i + 1] = Integer.parseInt(st.nextToken());
        }

        // 길이(AB, ABC, ABCD 등..)
        for(int len = 2; len <= N; ++len) {
            // i : 시작 행렬
            for(int i = 1; i <= N - len + 1; ++i) {
                // j : 마지막 행렬
                int j = i + len - 1;
                // 가장 큰 값으로 초기화
                dp[i][j] = Integer.MAX_VALUE;
                // k : i ~ (j - 1) 사이에 있는 값 (시작 행렬 - 끝 행렬 사이의 곱해지는 행렬)
                for(int k = i; k < j; ++k) {
                    int cost = dp[i][k] + dp[k+1][j] + d[i-1] * d[k] * d[j];
                    dp[i][j] = Math.min(dp[i][j], cost);
                }
            }
        }

        bw.write(dp[1][N] + "\n");
        bw.flush();
    }
}	