결혼식 성공

문제
상근이는 자신의 결혼식에 학교 동기 중 자신의 친구와 친구의 친구를 초대하기로 했다. 
상근이의 동기는 모두 N명이고, 이 학생들의 학번은 모두 1부터 N까지이다. 상근이의 학번은 1이다.

상근이는 동기들의 친구 관계를 모두 조사한 리스트를 가지고 있다. 이 리스트를 바탕으로 결혼식에 초대할 사람의 수를 구하는 프로그램을 작성하시오.

입력
첫째 줄에 상근이의 동기의 수 n (2 ≤ n ≤ 500)이 주어진다. 둘째 줄에는 리스트의 길이 m (1 ≤ m ≤ 10000)이 주어진다. 
다음 줄부터 m개 줄에는 친구 관계 ai bi가 주어진다. (1 ≤ ai < bi ≤ n) ai와 bi가 친구라는 뜻이며, bi와 ai도 친구관계이다. 

출력
첫째 줄에 상근이의 결혼식에 초대하는 동기의 수를 출력한다.

예제 입력 1 
6
5
1 2
1 3
3 4
2 3
4 5
예제 출력 1 
3
힌트
2와 3은 상근이의 친구이다. 또, 3과 4는 친구이기 때문에, 4는 상근이의 친구의 친구이다. 
5와 6은 친구도 아니고, 친구의 친구도 아니다. 따라서 2,3,4 3명의 친구를 결혼식에 초대한다.

PS:
	* 친구의 친구까지 구하면 되는 문제다.
	* BFS 두 번 돌리면 끝
	
	
import java.io.*;
import java.util.*;

public class Main {

    static StringBuilder sb = new StringBuilder();
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
    static StringTokenizer st;

    static int N, M;
    static ArrayList<Integer>[] graph = null;
    static boolean[] check = null;

    public static void main(String args[]) throws Exception {

        N = Integer.parseInt(br.readLine());
        M = Integer.parseInt(br.readLine());

        graph = new ArrayList[N + 1];
        check = new boolean[N + 1];

        for(int i = 0; i <= N; ++i)
            graph[i] = new ArrayList<>();

        for(int i = 0; i < M; ++i) {
            st = new StringTokenizer(br.readLine());

            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());

            graph[a].add(b);
            graph[b].add(a);
        }


        int ans = BFS();

        bw.write(ans + "\n");
        bw.flush();

    }

    public static int BFS() {

        check[1] = true;

        int num = 0;

        Queue<Integer> q = new ArrayDeque<>();

        int len = graph[1].size();

        for(int i = 0; i < len; ++i) {
            int next = graph[1].get(i);
            if(!check[next]) {
                q.add(next);
                check[next] = true;
                num++;
            }
        }

        while(!q.isEmpty()) {

            int next = q.poll();

            len = graph[next].size();

            for(int i = 0; i < len; ++i) {
                int n = graph[next].get(i);
                if(!check[n]) {
                    num++;
                    check[n] = true;
                }
            }
        }
        return num;
    }
}