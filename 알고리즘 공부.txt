* 그래프 알고리즘

1. 에라토스테네스의 체

	* 소수 구하기 알고리즘
	* 대량의 소수를 한 번에 구할 때 사용하는 알고리즘
	
	* 소수 1개 구하기 알고리즘
		
		- O(N)
			o 2 ~ (N-1) 까지 전부 다 돌려보는 알고리즘
		
		- O(N^(1/2)) 
			o 대칭성을 이용하는 알고리즘
			o EX) 8 = (1 * 8), (2 * 4), (4 * 2), (8 * 1) 과 같이 중간부터 대칭한 형태를 띈다.
                  그래서 SQRT(N) 까지만 돌아도 소수판별이 가능하다.
    
	* 에라토스테네스의 체 알고리즘은 각 배수를 삭제하는 알고리즘이다.
	  2 - N 까지 반복문 수행
		2 -> 4, 6, 8, 10, ... 2의 배수는 다 소수에서 제외
		3 -> 6, 9 , 12, ...   3의 배수는 다 소수에서 제외
		4 -> 이미 소수에서 제외된 수는 생략
		5 -> 10, 15, 20 ....  5의 배수는 다 소수에서 제외
		
		.. 이런 방식을 통해 2 - N 까지 존재하는 모든 소수를 판별할 수 있다.
		

	< 1. BOJ 4673번 예제 > https://www.acmicpc.net/problem/4673
	< 2. BOJ 1978번 예제 > https://www.acmicpc.net/problem/1978
	< 3. BOJ 1929번 예제 > https://www.acmicpc.net/problem/1929
	
	/* 1978번 예제 */
	
	import java.io.*;
	import java.util.*;

	public class Main {

		static StringBuilder sb;
		static BufferedReader br;
		static BufferedWriter bw;
		static StringTokenizer st;

		static int N, M, S, E;

		static boolean[] check = new boolean[1001];

		public static void main(String args[]) throws Exception {

			br = new BufferedReader(new InputStreamReader(System.in));
			bw = new BufferedWriter(new OutputStreamWriter(System.out));
			sb = new StringBuilder();
			// 0, 1 은 소수 아님
			check[0] = check[1] = true;
			
			// i 의 배수 전부 다 소수에서 제외
			for(int i = 2; i <= 1000; ++i) {
				// 소수가 아닌 시작점도 제외
				if(check[i]) continue;
				for(int j = i + i; j <= 1000; j += i) {
					check[j] = true;
				}
			}

			int ans = 0;

			N = Integer.parseInt(br.readLine());
			st = new StringTokenizer(br.readLine());

			for(int i = 0; i < N; ++i)
				if(!check[Integer.parseInt(st.nextToken())]) ans++;

			bw.write(ans + "\n");
			bw.flush();
		}
	}
	
	

1. DFS






2. BFS




3. Union - Find (Disjoint-Set)

	* 입력된 노드들이 같은 그래프안에 존재하는지 확인하는 알고리즘
	* 가능한 연산은 노드 연결, 노드 부모 찾기, 노드가 같은 그래프에 존재하는지 확인 세가지다.
	
	< 노드 부모 찾기 >
	1. 입력된 노드가 자신과 같은 노드이면 현재 노드는 최종 부모이다.
	2. 입력된 노드가 자신과 같은 값이 아니면 현재 노드는 최종 부모가 아니다.
		-> 1번 상태가 될 때 까지 자신의 부모 노드를 재귀적으로 방문한다.
	

	< 두 노드 연결하기 >
	1. 먼저 노드들의 최종 부모를 재귀함수를 이용하여 탐색한다.
	2. 탐색된 최종 부모 노드가 다른 경우에만 노드 연결을 시도한다.
		* 입력된 두 노드의 부모를 변경하는 것이 아니라 탐색된 최종 부모노드의 부모를 변경하는 것이다.
		-> 최종 부모 노드의 값이 낮은 쪽을 값이 큰 노드의 부모로 설정한다.
		
	< 노드가 같은 그래프에 존재하는지 확인 >
	1. 입력된 노드들의 최종 부모들을 < 노드 부모 찾기 > 를 통해 불러온다.
	2. 불러온 노드들의 최종 부모가 다 동일하면 true 아니면 false 이다.

	< 3. BOJ 4195 번 예제 >  https://www.acmicpc.net/problem/4195
	< 2. BOJ 1976 번 예제 >  https://www.acmicpc.net/problem/1976
	< 1. BOJ 1717 번 예제 >  https://www.acmicpc.net/problem/1717
	
	
4. MST

	* 최소한의 비용으로 모든 노드를 연결하기 위한 알고리즘
	* 각 알고리즘에 따라 노드를 연결하는 방식이 달라짐
	* 간선의 수는 노드의 수 - 1개로 고정. ( N개의 노드를 연결하는데 N-1개의 간선이면 연결 가능)
	* 사이클이 발생 X ( 사이클이 발생하면 노드 수 - 1개로 모든 노드를 연결할 수 없게됨 )
	
	
	- Kruskal
	* 입력된 간선들 중 최소 비용을 가지는 간선들을 우선적으로 선택하는 알고리즘
	* 사이클 발생 유무는 Union-Find 알고리즘을 통해 판단
		- 같은 최상위 조상을 가짐 -> 사이클 발생, 해당 간선 제외
		- 다른 최상위 조상을 가짐 -> 다른 그래프들을 연결
	* 간선 정렬, 사이클 유무 확인, 제외/연결 순서로 실행한다.
	* 간선 정렬대신 우선순위 큐를 이용하여 정렬하면 더 빠른 시간에 문제를 해결할 수 있다.
	
	< 간선 정렬 >
	1. 가장 cost 가 낮은 순서대로 간선을 정렬한다.
	
	< 사이클 유무 확인 >
	1. 입력된 간선의 start, end 지점이 연결되었을 때 사이클이 생기는지 확인
		- 사이클 O -> 제외
		- 사이클 X -> 연결
	
	< 1. BOJ 9372번 예제 > https://www.acmicpc.net/problem/9372
	< 2. BOJ 1197번 예제 > https://www.acmicpc.net/problem/1197
	< 3. BOJ 1922번 예제 > https://www.acmicpc.net/problem/1922
	
	
	/* 1197번 예제 */
	
	import java.io.*;
	import java.util.*;

	public class Main {

		static BufferedReader br;
		static BufferedWriter bw;
		static StringTokenizer st;

		static int V,E;

		static int[] cities = new int[10001];

		static class Edge implements Comparable<Edge>{
			int start;
			int end;
			int cost;

			public Edge(int _start, int _end, int _cost) {
				start = _start;
				end = _end;
				cost = _cost;
			}

			@Override
			public int compareTo(Edge o) {
				return cost > o.cost ? 1 : cost == o.cost ? 0 : -1;
			}
		}

		public static void main(String args[]) throws Exception {

			br = new BufferedReader(new InputStreamReader(System.in));
			bw = new BufferedWriter(new OutputStreamWriter(System.out));

			st = new StringTokenizer(br.readLine());

			V = Integer.parseInt(st.nextToken());
			E = Integer.parseInt(st.nextToken());

			PriorityQueue<Edge> priorityQueue = new PriorityQueue<>();

			for(int i = 1; i <= V; ++i)
				cities[i] = i;

			for(int i = 0; i < E; ++i) {
				st = new StringTokenizer(br.readLine());

				int s = Integer.parseInt(st.nextToken());
				int e = Integer.parseInt(st.nextToken());
				int cost = Integer.parseInt(st.nextToken());

				priorityQueue.add(new Edge(s,e,cost));
			}

			int sum = 0;
			int cnt = 0;
			for(int i = 0; i < E && cnt < V - 1; i++) {

				Edge e = priorityQueue.poll();

				if(unionParent(e.start, e.end)) {
					sum += e.cost;
					cnt++;
				}
			}

			bw.write(sum + "\n");
			bw.flush();
		}

		public static int findParent(int n) {
			if(cities[n] == n) return n;
			return cities[n] = findParent(cities[n]);
		}

		public static boolean unionParent(int n1, int n2) {

			n1 = findParent(n1);
			n2 = findParent(n2);

			if(n1 != n2) {
				if(n1 < n2) cities[n2] = n1;
				else cities[n1] = n2;
				return true;
			}
			return false;
		}
	}
	
	
	- Prim
	* 시작점을 선택하여 그래프에 연결된 간선들과 인접한 노드들을 확인하여 가장 낮은 cost를 가지는 간선을 선택하는 알고리즘
	* 사이클 발생을 없애기 위해서 visit 배열을 이용하여 이미 방문한 노드는 방문하지 않는다.
	* 어느 시작점에서 시작해도 모든 노드를 연결하는데 드는 비용은 동일하다.
	* 우선순위 큐를 이용하여 선택할 수 있는 간선들 중 가장 낮은 비용의 간선을 O(1)에 뽑아낸다.
	* 간선 입력, 시작점 선택, 최소 비용을 가지는 간선 선택, 현재 정점과 인접한 정점 확인, 반복의 순서로 진행된다.
	
	< 간선 입력 >
	1. 간선을 인접 리스트에 저장한다.
	
	< 시작점 선택 >
	1. 하얀천과 바람만 있으면 어디든 가니까 맘대로 선택
	
	< 최소 비용을 가지는 간선 선택 >
	1. 우선순위 큐에서 값을 뽑아낸다.
	
	< 현재 정점과 인접한 정점 확인 >
	1. 시작점은 따로 확인한다.
	2. 나머지는 현재 선택된 간선을 기준으로 인접 정점을 확인한다.
	3. 이미 방문한 정점은 그냥 무시한다.
	
	< 1. BOJ 1197번 예제 >  https://www.acmicpc.net/problem/
		
		
	/* 1197번 예제 */
	
	import java.io.*;
	import java.util.*;

	public class Main {

		static BufferedReader br;
		static BufferedWriter bw;
		static StringTokenizer st;

		static class Edge implements Comparable<Edge> {
			int dest;
			int cost;

			public Edge(int dest, int cost) {
				this.dest = dest;
				this.cost = cost;
			}

			@Override
			public int compareTo(Edge o) {
				return cost > o.cost ? 1 : cost == o.cost ? 0 : -1;
			}
		}
		// 각 정점을 방문했는지 안했는지 확인하는 배열
		static boolean[] isVisited = new boolean[100001];
		// 각 정점에서 연결된 지역 리스트
		static ArrayList<Edge>[] adlist = new ArrayList[100001];
		static int V, E;

		public static void main(String args[]) throws Exception {

			br = new BufferedReader(new InputStreamReader(System.in));
			bw = new BufferedWriter(new OutputStreamWriter(System.out));

			st = new StringTokenizer(br.readLine());
			// 정점의 수, 간선의 수
			V = Integer.parseInt(st.nextToken());
			E = Integer.parseInt(st.nextToken());

			for(int i = 0; i <= V; ++i)
				adlist[i] = new ArrayList<>();

			for(int i = 0; i < E; ++i) {
				st = new StringTokenizer(br.readLine());
				// 간선 정보
				int s = Integer.parseInt(st.nextToken());
				int e = Integer.parseInt(st.nextToken());
				int cost = Integer.parseInt(st.nextToken());
				// 간선 정보 저장
				adlist[s].add(new Edge(e, cost));
				adlist[e].add(new Edge(s, cost));
			}

			int minCost = prim(1);

			bw.write(minCost + "\n");
			bw.flush();
		}

		public static int prim(int start) {
			// 모든 노드를 연결하는데 드는 최소 비용
			int minCost = 0;

			// 연결된 노드 중 가장 적은 비용을 가지는 간선 정보를 저장하는 우선순위 큐
			PriorityQueue<Edge> pq = new PriorityQueue<>();

			isVisited[start] = true;

			Iterator<Edge> it = adlist[start].iterator();

			// 시작점과 연결된 간선정보를 큐에 넣어준다.
			while(it.hasNext())
				pq.add(it.next());

			// prim 알고리즘을 통해 MST 만들기
			while(!pq.isEmpty()) {

				// 연결된 노드에서 가장 가까이 인접한 노드 선택
				Edge e = pq.poll();

				// 이미 방문한 지역은 pass
				if(isVisited[e.dest]) continue;
				// 다음 방문 지역 true 설정
				isVisited[e.dest] = true;

				// minCost에 값 추가하기
				minCost = minCost + e.cost;

				// 연결한 노드와 인접한 노드들을 우선순위 큐에 넣어주기
				it = adlist[e.dest].iterator();

				while(it.hasNext()) {
					Edge t = it.next();
					// 이미 방문된 노드를 목적지로 가지는 노드는 제외
					if(isVisited[t.dest]) continue;
					pq.add(t);
				}
			}

			return minCost;
		}
	}
	
	
	- Solin
	
	
6. Topology Sort

	* DAG(Directed Acyclic Graph) 에서만 사용 가능한 알고리즘
	* 순서가 정해진 작업들의 작업 순서를 확인하는 알고리즘
	* 진입 차수를 이용해 작업의 순서를 정한다.
	* DFS 를 이용한 방법도 존재
	* 사이클 확인은 간단하게 할 수 있다.
		- 모든 정점을 방문하려면 Queue에서 N번 출발점을 뽑아야한다.
		- 그러므로 출발점을 N번 뽑아내기 이전에 Queue가 빈다면 이는 사이클이 존재하는 상태이다.
	* <진입 차수가 0 인 노드 큐에 넣기> , <큐에서 하나씩 빼서 인접한 노드들의 진입 차수를 하나씩 줄임 >, <진입차수가 0이 된 노드를 큐에 넣기 및 출력용 스택에 넣기>
	  를 반복하며 진행된다.
	* O(V + E) 의 시간 복잡도를 가짐
		- 정점의 수 + 간선의 수 만큼 시간 소요
		
		
	< 1. BOJ 2252번 예제 > https://www.acmicpc.net/problem/2252
	< 2. BOJ 1005번 예제 > https://www.acmicpc.net/problem/1005
	< 3. BOJ 1516번 예제 > https://www.acmicpc.net/problem/1516
	< 4. BOJ 2623번 예제 > https://www.acmicpc.net/problem/2623
	< 5. BOJ 2529번 예제 > https://www.acmicpc.net/problem/2529
	< 6. BOJ 1948번 예제 > https://www.acmicpc.net/problem/1948
	
	/* 2252번 문제 풀이 */
	
	import java.io.*;
	import java.util.*;

	public class Main {

		static BufferedReader br;
		static BufferedWriter bw;
		static StringTokenizer st;

		static int N, M;

		static int[] inDgree = new int[32001];
		static int[] sortedGraph = new int[32001];
		static ArrayList<Integer>[] DAG = new ArrayList[32001];

		public static void main(String args[]) throws Exception {

			br = new BufferedReader(new InputStreamReader(System.in));
			bw = new BufferedWriter(new OutputStreamWriter(System.out));

			st = new StringTokenizer(br.readLine());

			N = Integer.parseInt(st.nextToken());
			M = Integer.parseInt(st.nextToken());

			for(int i = 0; i <= N; ++i)
				DAG[i] = new ArrayList<>();

			for(int i = 0; i < M; ++i) {
				st = new StringTokenizer(br.readLine());
				// 진입 차수 증가
				int A = Integer.parseInt(st.nextToken());
				int B = Integer.parseInt(st.nextToken());
				inDgree[A]++;
				// 그래프 입력
				DAG[B].add(A);
			}

			// 진입 차수 0 저장 큐
			Queue<Integer> q = new ArrayDeque<>();

			int pos = 0;

			// 진입 차수가 0인 녀석들 넣어주기
			for(int i = 1; i <= N; ++i) {
				if (inDgree[i] == 0) {
					q.add(i);
					sortedGraph[pos++] = i;
				}
			}

			boolean hasCycle = false;

			for(int i = 1; i <= N; ++i) {
				// 사이클이 없다면 큐에서 딱 N번 원소를 뺄 수 있음
				if(q.isEmpty()) {
					hasCycle = true;
					break;
				}
				// 다음 작업 위치 poll
				int next = q.poll();

				Iterator<Integer> it = DAG[next].iterator();

				while(it.hasNext()) {
					// 다음 작업 진입차수 줄이기
					int node = it.next();
					// 진입차수가 0이 되었다면 Queue에 추가
					if(--inDgree[node] == 0) {
						q.add(node);
						sortedGraph[pos++] = node;
					}
				}
			}

			if(hasCycle) {
				bw = new BufferedWriter(new OutputStreamWriter(System.out));
				bw.write("This graph is not DAG");
			} else {
				for(int i = pos - 1; i >= 0; --i)
					bw.write(sortedGraph[i] + " ");
			}
			bw.write("\n");
			bw.flush();
		}
	}


	
7. Dijkstra


	* 특정 지점부터 다른 지점들까지의 최단 경로와 비용을 계산하는 알고리즘
	* DP 나 그리디 알고리즘의 모습이다.
		- DP   : 최단경로는 짧은 최단경로의 연결로 이뤄진다.
		- 그리디 : 현재 경로에서 가장 인접한 노드를 선택하는 방식.		
	* 방식은 O(N^2) , O(NlogN) 두가지 방식이 존재한다.
	* 음의 가중치는 사용할 수 없다. 
	  다익스트라 알고리즘은 매번 최단 경로를 갱신하면서 진행하는 알고리즘인데 음의 가중치가 존재하면 갱신이 무한하게 발생한다.
	* 특정 노드까지 최단 경로는 배열을 하나 더 사용해서 알아낼 수 있다.
		- 현재 노드가 갱신될 때 path[다음 노드] = 현재 노드 번호 와 같은 방식으로 저장해두고 나중에 역추적해서 경로를 구할 수 있다.
	* 시작 정점 선택, 거리 배열 초기화, 각 정점의 인접한 정점 거리 갱신 의 과정을 반복하며 진행한다.
	
	< 시작 정점 선택 >
	1. 마음대로 선택한다.
	
	< 거리 배열 초기화 >
	1. 기본적으로 가장 큰 값(2^31 - 1)을 하지만 맘에드는 20억정도나 10억정도로 초기화 해도 된다.
	
	< 각 정점의 인접한 정점 거리 갱신 >
	1. O(N^2) 에서는 선형 탐색을 통해 가장 인접한 노드를 찾는다.
	2. O(NlogN) 에서는 우선순위큐를 이용하여 가장 인접한 노드를 뽑아낸다.
	3. 가장 인접한 정점을 찾아냈으면 새로 계산한 값과 현재까지의 최단거리 값을 비교해서 새로 계산한 값이 현재까지의 최단거리보다 작으면 갱신한다.
	
	
	< 1. BOJ 1753번 예제 > https://www.acmicpc.net/problem/1753

	
	/* 이 코드에는 경로도 출력한다 */
	import java.io.*;
	import java.util.*;

	public class Main {

		static BufferedReader br;
		static BufferedWriter bw;
		static StringTokenizer st;

		static class Edge implements Comparable<Edge> {
			int next;
			int cost;

			public Edge(int next, int cost) {
				this.next = next;
				this.cost = cost;
			}

			@Override
			public int compareTo(Edge o) {
				return cost > o.cost ? 1 : cost == o.cost ? 0 : -1;
			}
		}
		// 시작 지점에서 다른 노드까지 가는데 드는 최소 비용 및 경로
		// 0 : cost
		// 1 : previous node
		static int[][] dist = new int[2][20001];

		// 각 정점에서 연결된 지역 리스트
		static ArrayList<Edge>[] adlist = new ArrayList[20001];
		static int V, E;
		static final int INF = Integer.MAX_VALUE;
		static boolean[] check = new boolean[20001];

		public static void main(String args[]) throws Exception {

			br = new BufferedReader(new InputStreamReader(System.in));
			bw = new BufferedWriter(new OutputStreamWriter(System.out));

			st = new StringTokenizer(br.readLine());
			// 정점의 수, 간선의 수
			V = Integer.parseInt(st.nextToken());
			E = Integer.parseInt(st.nextToken());

			// 시작 노드
			int startNode = Integer.parseInt(br.readLine());

			for(int i = 0; i <= V; ++i)
				adlist[i] = new ArrayList<>();

			// 간선 입력(방향 그래프)
			for(int i = 0; i < E; ++i) {
				st = new StringTokenizer(br.readLine());
				// 간선 정보
				int s = Integer.parseInt(st.nextToken());
				int e = Integer.parseInt(st.nextToken());
				int cost = Integer.parseInt(st.nextToken());
				// 간선 정보 저장
				adlist[s].add(new Edge(e, cost));
			}

			// 거리 배열 INF로 초기화
			Arrays.fill(dist[0], INF);

			dijkstra(startNode);

			for(int i = 1; i <= V; ++i)
				bw.write(dist[0][i] == INF ? "INF\n" : dist[0][i] + "\n");
			bw.flush();

			for(int i = 1; i <= V; ++i) {
				Arrays.fill(check, 1, V + 2, false);
				bw.write(i + "번까지의 경로 : ");
				findPath(i);
				bw.write("\n");
				bw.flush();
			}
		}


		// 시작점부터 입력된 node까지의 최단 경로를 역으로 탐색하면서 구한다.
		// 만약 갈 길이 없는 경우(dist == INF) 같은 경우는 다른 문구 출력
		public static void findPath(int node) throws IOException{
			if(dist[0][node] == INF) {
				bw = new BufferedWriter(new OutputStreamWriter(System.out));
				bw.write("can't make path \n");
				return;
			}

			if(!check[node]) {
				check[node] = true;
				findPath(dist[1][node]);
				bw.write(node + " ");
			}
		}


		public static void dijkstra(int start) {

			// 최소 비용 간선 선택을 빠르게
			PriorityQueue<Edge> pq = new PriorityQueue<>();

			// 시작 지점 설정
			dist[0][start] = 0;
			dist[1][start] = start;

			pq.add(new Edge(start, 0));

			while(!pq.isEmpty()) {
				// 선택된 간선
				Edge e = pq.poll();

				// 이전 노드의 도착지점
				int curPos = e.next;
				// 이전 노드에서 지금 노드까지의 비용
				int cost = e.cost;

				// 이전까지 기록했던 최단거리보다
				// 이전 노드에서 현재 노드까지 오는 비용이 더 크면 pass
				if(dist[0][curPos] < cost) continue;

				int len = adlist[curPos].size();

				for(int i = 0; i < len; ++i) {
					// 선택된 노드의 인접 노드
					int next = adlist[curPos].get(i).next;
					// 현재까지의 경로 비용 + 현재 위치 -> 다음 위치까지 가는 경로의 비용
					int nextDistance = cost + adlist[curPos].get(i).cost;
					// 이전까지의 비용과 현재 갱신된 비용을 비교
					if(nextDistance < dist[0][next]) {
						// 갱신된 값이 더 작다면 갱신
						dist[0][next] = nextDistance;
						// 경로도 갱신
						dist[1][next] = curPos;
						pq.add(new Edge(next, nextDistance));
					}
				}
			}
		}
	}

	다른 입력 
	6 20
	1
	1 2 2
	1 3 5
	1 4 1
	2 1 2
	2 3 3
	2 4 2
	3 1 5
	3 2 3
	3 4 3
	3 5 1
	3 6 5
	4 1 1
	4 2 2
	4 3 3
	4 5 1
	5 3 1
	5 4 1
	5 6 2
	6 3 5
	6 5 2
	

8. BellmanFord

	* 특정 지점에서 다른 지점까지의 최단 거리를 구하는 알고리즘
	* 음의 가중치를 가지는 간선이 존재할 수 있다. 
	* 음의 순환은 존재하면 안된다. (간선까지의 비용이 음의 무한대가 된다)
	* 경로의 최대 길이는 V - 1이다. ( 최단 경로의 길이가 V 이상이면 음의 사이클이 존재하는 경우이다. )
		- 일직선 경로가 있고 A -> F 까지의 최단거리를 생각해보자
		  (A -> B -> C -> D -> E -> F)
		  최단거리는 (V - 1)개의 간선을 가진다.
	* O(VE) 시간 복잡도를 가진다.
	* 각 정점에서 인접한 노드들과 거리 갱신을 V - 1번을 수행하면 최단거리를 구할 수 있다.
	* 마지막에 한 번 더 갱신을 시도해서 값이 갱신된다면 이는 음의 사이클이 존재한다고 판명할 수 있다.
	* boolean 변수를 하나 이용하여 갱신이 한 번도 이뤄지지 않으면 이미 최단거리를 다 계산한 경우이므로 반복문 종료.
	
	< 1. BOJ 11657번 예제 > https://www.acmicpc.net/problem/11657
	< 2. BOJ 1865 번 예제 > https://www.acmicpc.net/problem/1865
	
	/* 11657번 문제 */
	
	import java.io.*;
	import java.util.*;

	public class Main {

		static BufferedReader br;
		static BufferedWriter bw;
		static StringTokenizer st;

		static class Edge {
			int next;
			int cost;

			public Edge(int next, int cost) {
				this.next = next;
				this.cost = cost;
			}
		}

		static final int INF = 1987654321;
		static int T, V, E;
		static long[] dist = new long[510];

		static ArrayList<Edge>[] adList = new ArrayList[501];

		public static void main(String args[]) throws Exception {

			br = new BufferedReader(new InputStreamReader(System.in));
			bw = new BufferedWriter(new OutputStreamWriter(System.out));

			st = new StringTokenizer(br.readLine());

			V = Integer.parseInt(st.nextToken());
			E = Integer.parseInt(st.nextToken());

			for(int i = 0; i <= V; ++i) {
				adList[i] = new ArrayList<>();
				dist[i] = INF;
			}
			
			for(int i = 0; i < E; ++i) {
				st = new StringTokenizer(br.readLine());

				int s = Integer.parseInt(st.nextToken());
				int e = Integer.parseInt(st.nextToken());
				int c = Integer.parseInt(st.nextToken());

				adList[s].add(new Edge(e,c));
			}

			boolean isUpdated = bellmanFord(1);

			if(isUpdated)
				bw.write("-1\n");
			else
				for(int i = 2; i <= V; ++i)
					bw.write((dist[i] == INF ? -1 : dist[i]) + "\n");

			bw.flush();
		}

		public static boolean bellmanFord(int start) {

			// 시작점 0 설정
			dist[start] = 0;
			// 마지막에 Update가 된 경우엔 음의 사이클이 존재한다.
			boolean isRelaxed = false;

			for(int i = 1; i <= V; ++i) {
				isRelaxed = false;
				for(int j = 1; j <= V; ++j) {
					int len = adList[j].size();
					// 경로 최단거리 갱신
					for(int k = 0; k < len; ++k) {
						if(dist[j] + adList[j].get(k).cost < dist[adList[j].get(k).next]) {
							dist[adList[j].get(k).next] = dist[j] + adList[j].get(k).cost;
							isRelaxed = true;
						}
					}
				}
				// 갱신이 한번도 이뤄지지 않으면 최단거리 탐색 끝
				if(!isRelaxed) break;
			}
			// True 인 경우 음의 사이클 존재
			// False 인 경우 최단거리 탐색 완료
			return isRelaxed;
		}
	}
	
	
	
9. Floyd - Warshall

	* 다익스트라, 벨만 포드 알고리즘과 다르게 모든 정점 사이의 최단 거리를 파악하는 알고리즘
	* 플로이드 워셜 알고리즘도 최단거리는 최단거리로 이뤄져있다는 전제하에 알고리즘 실행
	* 시작 정점 -> 거쳐가는 정점 -> 도착 정점의 최단 거리를 구함 -> 각 각의 최단거리가 최종 최단거리를 만드는 알고리즘
	* 다익스트라 혹은 벨만포드를 여러번 쓰는 알고리즘과 동일하지 않을까 ? 라는 생각을 해봄 (그러면 벨만포드를 여러번 쓰는게 낫지않남 ?)
	* 시간 복잡도는 O(N^3) 소요
	
	
	< 1. BOJ 11403번 예제 > https://www.acmicpc.net/problem/11403
	< 2. BOJ 11404번 예제 > https://www.acmicpc.net/problem/11404
		
	/* 11403 문제 */
	
	import java.io.*;
	import java.util.*;

	public class Main {

		static BufferedReader br;
		static BufferedWriter bw;
		static StringTokenizer st;

		static class Edge {
			int next;
			int cost;

			public Edge(int next, int cost) {
				this.next = next;
				this.cost = cost;
			}
		}

		static int N;
		static int[][] connection = new int[101][101];

		public static void main(String args[]) throws Exception {

			br = new BufferedReader(new InputStreamReader(System.in));
			bw = new BufferedWriter(new OutputStreamWriter(System.out));

			N = Integer.parseInt(br.readLine());

			for(int i = 0; i < N; ++i) {
				st = new StringTokenizer(br.readLine());
				for(int j = 0; j < N; ++j)
					connection[i][j] = Integer.parseInt(st.nextToken());
			}

			floyd_warshall();

			for(int i = 0; i < N; ++i) {
				for(int j = 0; j < N; ++j)
					bw.write(connection[i][j] + " ");
				bw.write("\n");
			}

			bw.flush();
		}

		public static void floyd_warshall() {

			for(int inter = 0; inter < N; ++inter)  // 거쳐가는 지점
				for(int start = 0; start < N; ++start)  // 시작 지점
					for(int dest = 0; dest < N; ++dest)  // 도착 지점
						if(connection[start][inter] == 1 && connection[inter][dest] == 1)
							connection[start][dest] = 1;
					
		}
	}

	

	
10. Strongly Connected Component(SCC)
	
	* 서로 왕복할 수 있는 정점들의 가장 큰 집합을 구하는 알고리즘
	* SCC 의 특징
		- 같은 SCC에 포함되는 정점들은 서로 왕복할 수 있다.
		- 다른 SCC에 포함되는 정점들은 서로 왕복할 수 없다
			o 만약 A SCC 와 B SCC에서 각 정점 a,b 를 뽑았다고 가정하면 a -> b, b -> a 로 가는 경로는 같이 존재할 수 없다.
			  SCC 자체가 서로 왕복할 수 있는 정점들의 가장 큰 집합인데 그 규칙을 무시해버리기 때문. 반면 경로 하나는 존재 가능
		- SCC를 정점으로보고 위상정렬 등 다른 알고리즘과 같이 사용할 수 있다.
		- 사이클이 있으면 무조건 SCC 이다.
		
	* SCC를 구하는 알고리즘
		/* 코드는 아래 문제에서 두가지 방식으로 풀이 */
		
		1. 코사라주 알고리즘
			- 코사라주 알고리즘은 DFS와 STACK을 이용하여 SCC를 구한다.
			
			< 준비물 >
				- STACK, 정방향 그래프, 역방향 그래프
					
			< 동작 방식 >
			1. 정방향 그래프에서 DFS 를 수행 후 DFS가 끝나는 순서대로 스택에 삽입
			2. 역방향 그래프에서 TOP 정점을 시작점으로 DFS 수행 
				- 역방향 그래프 DFS 수행 시 방문하는 정점은 SCC에 포함되는 경로임.
				- 이미 탐색된 노드는 역방향 DFS 의 시작점으로 사용할 수 없음(이미 SCC에 포함된 노드라서)
				- DFS를 다 수행하면 SCC 경로를 VECTOR나 다른 컨테이너에 저장하면 경로를 알 수있음.			
			3. STACK이 빌 때까지 2번 수행하면 SCC를 구할 수 있다.
				
				
		2. 타잔 알고리즘
			- 타잔 알고리즘도 DFS와 STACK을 이용하여 SCC를 구현한다.
			- 코사라주 알고리즘과 차이는 정방향 DFS를 한 번만 수행하여 SCC를 찾아낸다.
			- SCC 그룹을 만들 때 Union-Find 알고리즘을 이용한다.
			
			< 준비물 >
				STACK, 정방향 그래프
				
			< 동작 방식 >
			1. 정방향 그래프에서 DFS 를 수행한다.
				- 처음 방문한 노드에는 각 방문 순서를 준다(처음 방문한 고유 번호가 0 으로 설정되어있음)
				* 고유번호를 노드 번호로 사용하면 안된다. (낮은 번호의 노드가 경로 뒤에 있는 경우 작동이 제대로 안됨)
				- 스택에 방문한 번호 삽입
			2. 정점과 연결되어있는 정점 확인
				- 다음 정점이 방문하지 않은 정점 -> 해당 정점 DFS 수행
				- 다음 정점이 방문한 정점 -> 두 정점중 고유 번호가 낮은 정점으로 고유번호를 변경한다.
			
			3. DFS가 끝나고 반환된 인접 정점이 현재 정점과 같다면 현재 정점이 SCC의 시작점이다.
				- 이 경우 STACK에서 현재 정점이 나올 때까지 계속 POP을 반복하여 SCC에 포함된 노드들을 따로 저장한다.
			
			4. 이미 SCC에 포함된 정점을 제외하고 모든 정점에 대해서 (1-3)번 과정을 반복해서 수행하면 모든 SCC를 구할 수 있다.
	
	
	
	< 1. BOJ 2150번 예제 > https://www.acmicpc.net/problem/2150
	

	/* 코사라주 알고리즘 */
	
	import java.io.*;
	import java.util.*;

	public class Main {

		static StringBuilder sb;
		static BufferedReader br;
		static BufferedWriter bw;
		static StringTokenizer st;

		static int V, E, numOfSCC;
		static ArrayList<Integer>[] gr = new ArrayList[10001], agr = new ArrayList[10001];
		static ArrayList<Integer> SCC = null;
		static boolean[] isVisited = new boolean[10001];
		static Stack<Integer> stack = new Stack<>();

		public static void main(String args[]) throws Exception {

			br = new BufferedReader(new InputStreamReader(System.in));
			bw = new BufferedWriter(new OutputStreamWriter(System.out));
			sb = new StringBuilder();

			st = new StringTokenizer(br.readLine());
			V = Integer.parseInt(st.nextToken());
			E = Integer.parseInt(st.nextToken());

			// 정방향, 역방향 그래프
			for(int i = 0; i <= V; ++i) {
				gr[i] = new ArrayList<>();
				agr[i] = new ArrayList<>();
			}

			for(int i = 0; i < E; ++i) {
				st = new StringTokenizer(br.readLine());
				int s = Integer.parseInt(st.nextToken());
				int e = Integer.parseInt(st.nextToken());

				gr[s].add(e);
				agr[e].add(s);
			}

			// 각 정점에 대해 DFS 수행
			for(int i = 1; i <= V; ++i)
				if(!isVisited[i])
					DFS(i);

			// 방문 배열 초기화
			Arrays.fill(isVisited, 0, V + 1, false);

			PriorityQueue<ArrayList<Integer>> pq = new PriorityQueue<>(new Comparator<ArrayList<Integer>>() {
				@Override
				public int compare(ArrayList<Integer> o1, ArrayList<Integer> o2) {
					return o1.get(0) > o2.get(0) ? 1 : -1;
				}
			});

			while(!stack.isEmpty()) {
				int next = stack.pop();
				if(!isVisited[next]) {
					SCC = new ArrayList<>();
					DFSForSCC(next);
					SCC.sort(null);
					pq.add(SCC);
					numOfSCC++;
				}
			}

			bw.write(numOfSCC + "\n");

			for(int i = 0; i < numOfSCC; ++i) {
				SCC = pq.poll();
				int len = SCC.size();
				for(int j = 0; j < len; ++j)
					bw.write(SCC.get(j) + " ");
				bw.write("-1\n");
			}

			bw.flush();
		}

		public static void DFS(int node) {

			isVisited[node] = true;
			int len = gr[node].size();

			// 방문하지 않는 위치만 방문
			for(int i = 0; i < len; ++i)
				if(!isVisited[gr[node].get(i)])
					DFS(gr[node].get(i));

			// DFS가 끝나는 순서대로 STACK 넣기 ! 중요
			stack.add(node);
		}

		public static void DFSForSCC(int node) {

			isVisited[node] = true;
			SCC.add(node);

			int len = agr[node].size();

			for(int i = 0; i < len; ++i)
				if(!isVisited[agr[node].get(i)])
					DFSForSCC(agr[node].get(i));
		}
	}
	
	
	/* 타잔 알고리즘 */
	
	import java.io.*;
	import java.util.*;

	public class Main {

		static StringBuilder sb;
		static BufferedReader br;
		static BufferedWriter bw;
		static StringTokenizer st;

		static int V, E, numOfSCC, id = 1;
		static ArrayList<Integer>[] gr = new ArrayList[10001];
		static ArrayList<Integer> SCC = null;
		static int[] isVisited = new int[10001];
		static boolean[] check = new boolean[10001];
		static Stack<Integer> stack = new Stack<>();
		static PriorityQueue<ArrayList<Integer>> pq = null;

		public static void main(String args[]) throws Exception {

			br = new BufferedReader(new InputStreamReader(System.in));
			bw = new BufferedWriter(new OutputStreamWriter(System.out));
			sb = new StringBuilder();

			st = new StringTokenizer(br.readLine());
			V = Integer.parseInt(st.nextToken());
			E = Integer.parseInt(st.nextToken());

			// 정방향, 역방향 그래프
			for(int i = 0; i <= V; ++i)
				gr[i] = new ArrayList<>();


			for(int i = 0; i < E; ++i) {
				st = new StringTokenizer(br.readLine());
				int s = Integer.parseInt(st.nextToken());
				int e = Integer.parseInt(st.nextToken());

				gr[s].add(e);
			}

			pq = new PriorityQueue<>(new Comparator<ArrayList<Integer>>() {
				@Override
				public int compare(ArrayList<Integer> o1, ArrayList<Integer> o2) {
					return o1.get(0) > o2.get(0) ? 1 : -1;
				}
			});

			// 각 정점에 대해 DFS 수행
			for(int i = 1; i <= V; ++i)
				if (isVisited[i] == 0)
					DFS(i);

			bw.write(numOfSCC + "\n");

			while(!pq.isEmpty()) {
				SCC = pq.poll();
				int len = SCC.size();
				for(int j = 0; j < len; ++j)
					bw.write(SCC.get(j) + " ");
				bw.write("-1\n");
			}

			bw.flush();
		}

		public static int DFS(int node) {

			// 방문 순서 부여하기
			isVisited[node] = id++;
			int temp = isVisited[node];
			int len = gr[node].size();

			stack.add(node);

			for(int i = 0; i < len; ++i) {
				int nextNode = gr[node].get(i);
				// 방문하지 않은 노드는 방문
				if(isVisited[nextNode] == 0)
					temp = Math.min(temp, DFS(nextNode));
				// 방문은 했는데 아지막 SCC에 포함되지 않은 노드는 낮은 방문 번호로 변경
				else if(!check[nextNode])
					temp = Math.min(temp, isVisited[nextNode]);
			}

			// 현재 노드가 포함된 SCC에서 가장 번호가 낮은 노드 == 현재 노드의 방문 번호이면
			// 현재 노드는 SCC의 시작지점이 된다.
			if(isVisited[node] == temp) {
				SCC = new ArrayList<>();
				while(true) {
					int nodeOfSCC = stack.pop();
					check[nodeOfSCC] = true;
					SCC.add(nodeOfSCC);
					// 현재지점까지 노드를 계속해서 SCC에 추가하기
					if(nodeOfSCC == node) break;
				}
				SCC.sort(new Comparator<Integer>() {
					@Override
					public int compare(Integer o1, Integer o2) {
						return o1 > o2 ? 1 : o1 == o2 ? 0 : -1;
					}
				});
				pq.add(SCC);
				numOfSCC++;
			}
			return temp;
		}
	}
	
	

17. 2-SAT
	
	
6. A* 
	
	
11. NetworkFlow


12. Sliding Window


16. SagementTree


13. Bipartite Matching


14. String Matching


15. KMP

	