* 그래프 알고리즘


1. DFS






2. BFS






3. Union - Find (Disjoint-Set)

	* 입력된 노드들이 같은 그래프안에 존재하는지 확인하는 알고리즘
	* 가능한 연산은 노드 연결, 노드 부모 찾기, 노드가 같은 그래프에 존재하는지 확인 세가지다.
	
	< 노드 부모 찾기 >
	1. 입력된 노드가 자신과 같은 노드이면 현재 노드는 최종 부모이다.
	2. 입력된 노드가 자신과 같은 값이 아니면 현재 노드는 최종 부모가 아니다.
		-> 1번 상태가 될 때 까지 자신의 부모 노드를 재귀적으로 방문한다.
	

	< 두 노드 연결하기 >
	1. 먼저 노드들의 최종 부모를 재귀함수를 이용하여 탐색한다.
	2. 탐색된 최종 부모 노드가 다른 경우에만 노드 연결을 시도한다.
		* 입력된 두 노드의 부모를 변경하는 것이 아니라 탐색된 최종 부모노드의 부모를 변경하는 것이다.
		-> 최종 부모 노드의 값이 낮은 쪽을 값이 큰 노드의 부모로 설정한다.
		
	< 노드가 같은 그래프에 존재하는지 확인 >
	1. 입력된 노드들의 최종 부모들을 < 노드 부모 찾기 > 를 통해 불러온다.
	2. 불러온 노드들의 최종 부모가 다 동일하면 true 아니면 false 이다.

	< 3. BOJ 4195 번 예제 >  https://www.acmicpc.net/problem/4195
	< 2. BOJ 1976 번 예제 >  https://www.acmicpc.net/problem/1976
	< 1. BOJ 1717 번 예제 >  https://www.acmicpc.net/problem/1717
	
	
4. MST

	* 최소한의 비용으로 모든 노드를 연결하기 위한 알고리즘
	* 각 알고리즘에 따라 노드를 연결하는 방식이 달라짐
	* 간선의 수는 노드의 수 - 1개로 고정. ( N개의 노드를 연결하는데 N-1개의 간선이면 연결 가능)
	* 사이클이 발생 X ( 사이클이 발생하면 노드 수 - 1개로 모든 노드를 연결할 수 없게됨 )
	
	
	- Kruskal
	* 입력된 간선들 중 최소 비용을 가지는 간선들을 우선적으로 선택하는 알고리즘
	* 사이클 발생 유무는 Union-Find 알고리즘을 통해 판단
		- 같은 최상위 조상을 가짐 -> 사이클 발생, 해당 간선 제외
		- 다른 최상위 조상을 가짐 -> 다른 그래프들을 연결
	* 간선 정렬, 사이클 유무 확인, 제외/연결 순서로 실행한다.
	* 간선 정렬대신 우선순위 큐를 이용하여 정렬하면 더 빠른 시간에 문제를 해결할 수 있다.
	
	< 간선 정렬 >
	1. 가장 cost 가 낮은 순서대로 간선을 정렬한다.
	
	< 사이클 유무 확인 >
	1. 입력된 간선의 start, end 지점이 연결되었을 때 사이클이 생기는지 확인
		- 사이클 O -> 제외
		- 사이클 X -> 연결
	
	< 1. BOJ 9372번 예제 > https://www.acmicpc.net/problem/9372
	< 2. BOJ 1197번 예제 > https://www.acmicpc.net/problem/1197
	< 3. BOJ 1922번 예제 > https://www.acmicpc.net/problem/1922
	
	
	/* 1197번 예제 */
	
	import java.io.*;
	import java.util.*;

	public class Main {

		static BufferedReader br;
		static BufferedWriter bw;
		static StringTokenizer st;

		static int V,E;

		static int[] cities = new int[10001];

		static class Edge implements Comparable<Edge>{
			int start;
			int end;
			int cost;

			public Edge(int _start, int _end, int _cost) {
				start = _start;
				end = _end;
				cost = _cost;
			}

			@Override
			public int compareTo(Edge o) {
				return cost > o.cost ? 1 : cost == o.cost ? 0 : -1;
			}
		}

		public static void main(String args[]) throws Exception {

			br = new BufferedReader(new InputStreamReader(System.in));
			bw = new BufferedWriter(new OutputStreamWriter(System.out));

			st = new StringTokenizer(br.readLine());

			V = Integer.parseInt(st.nextToken());
			E = Integer.parseInt(st.nextToken());

			PriorityQueue<Edge> priorityQueue = new PriorityQueue<>();

			for(int i = 1; i <= V; ++i)
				cities[i] = i;

			for(int i = 0; i < E; ++i) {
				st = new StringTokenizer(br.readLine());

				int s = Integer.parseInt(st.nextToken());
				int e = Integer.parseInt(st.nextToken());
				int cost = Integer.parseInt(st.nextToken());

				priorityQueue.add(new Edge(s,e,cost));
			}

			int sum = 0;
			int cnt = 0;
			for(int i = 0; i < E && cnt < V - 1; i++) {

				Edge e = priorityQueue.poll();

				if(unionParent(e.start, e.end)) {
					sum += e.cost;
					cnt++;
				}
			}

			bw.write(sum + "\n");
			bw.flush();
		}

		public static int findParent(int n) {
			if(cities[n] == n) return n;
			return cities[n] = findParent(cities[n]);
		}

		public static boolean unionParent(int n1, int n2) {

			n1 = findParent(n1);
			n2 = findParent(n2);

			if(n1 != n2) {
				if(n1 < n2) cities[n2] = n1;
				else cities[n1] = n2;
				return true;
			}
			return false;
		}
	}
	
	
	- Prim
	* 시작점을 선택하여 그래프에 연결된 간선들과 인접한 노드들을 확인하여 가장 낮은 cost를 가지는 간선을 선택하는 알고리즘
	* 사이클 발생을 없애기 위해서 visit 배열을 이용하여 이미 방문한 노드는 방문하지 않는다.
	* 어느 시작점에서 시작해도 모든 노드를 연결하는데 드는 비용은 동일하다.
	* 우선순위 큐를 이용하여 선택할 수 있는 간선들 중 가장 낮은 비용의 간선을 O(1)에 뽑아낸다.
	* 간선 입력, 시작점 선택, 최소 비용을 가지는 간선 선택, 현재 정점과 인접한 정점 확인, 반복의 순서로 진행된다.
	
	< 간선 입력 >
	1. 간선을 인접 리스트에 저장한다.
	
	< 시작점 선택 >
	1. 하얀천과 바람만 있으면 어디든 가니까 맘대로 선택
	
	< 최소 비용을 가지는 간선 선택 >
	1. 우선순위 큐에서 값을 뽑아낸다.
	
	< 현재 정점과 인접한 정점 확인 >
	1. 시작점은 따로 확인한다.
	2. 나머지는 현재 선택된 간선을 기준으로 인접 정점을 확인한다.
	3. 이미 방문한 정점은 그냥 무시한다.
	
	< 1. BOJ 1197번 예제 >  https://www.acmicpc.net/problem/
		
		
	/* 1197번 예제 */
	
	import java.io.*;
	import java.util.*;

	public class Main {

		static BufferedReader br;
		static BufferedWriter bw;
		static StringTokenizer st;

		static class Edge implements Comparable<Edge> {
			int dest;
			int cost;

			public Edge(int dest, int cost) {
				this.dest = dest;
				this.cost = cost;
			}

			@Override
			public int compareTo(Edge o) {
				return cost > o.cost ? 1 : cost == o.cost ? 0 : -1;
			}
		}
		// 각 정점을 방문했는지 안했는지 확인하는 배열
		static boolean[] isVisited = new boolean[100001];
		// 각 정점에서 연결된 지역 리스트
		static ArrayList<Edge>[] adlist = new ArrayList[100001];
		static int V, E;

		public static void main(String args[]) throws Exception {

			br = new BufferedReader(new InputStreamReader(System.in));
			bw = new BufferedWriter(new OutputStreamWriter(System.out));

			st = new StringTokenizer(br.readLine());
			// 정점의 수, 간선의 수
			V = Integer.parseInt(st.nextToken());
			E = Integer.parseInt(st.nextToken());

			for(int i = 0; i <= V; ++i)
				adlist[i] = new ArrayList<>();

			for(int i = 0; i < E; ++i) {
				st = new StringTokenizer(br.readLine());
				// 간선 정보
				int s = Integer.parseInt(st.nextToken());
				int e = Integer.parseInt(st.nextToken());
				int cost = Integer.parseInt(st.nextToken());
				// 간선 정보 저장
				adlist[s].add(new Edge(e, cost));
				adlist[e].add(new Edge(s, cost));
			}

			int minCost = prim(1);

			bw.write(minCost + "\n");
			bw.flush();
		}

		public static int prim(int start) {
			// 모든 노드를 연결하는데 드는 최소 비용
			int minCost = 0;

			// 연결된 노드 중 가장 적은 비용을 가지는 간선 정보를 저장하는 우선순위 큐
			PriorityQueue<Edge> pq = new PriorityQueue<>();

			isVisited[start] = true;

			Iterator<Edge> it = adlist[start].iterator();

			// 시작점과 연결된 간선정보를 큐에 넣어준다.
			while(it.hasNext())
				pq.add(it.next());

			// prim 알고리즘을 통해 MST 만들기
			while(!pq.isEmpty()) {

				// 연결된 노드에서 가장 가까이 인접한 노드 선택
				Edge e = pq.poll();

				// 이미 방문한 지역은 pass
				if(isVisited[e.dest]) continue;
				// 다음 방문 지역 true 설정
				isVisited[e.dest] = true;

				// minCost에 값 추가하기
				minCost = minCost + e.cost;

				// 연결한 노드와 인접한 노드들을 우선순위 큐에 넣어주기
				it = adlist[e.dest].iterator();

				while(it.hasNext()) {
					Edge t = it.next();
					// 이미 방문된 노드를 목적지로 가지는 노드는 제외
					if(isVisited[t.dest]) continue;
					pq.add(t);
				}
			}

			return minCost;
		}
	}
	
	
	
	
	- Solin
	
	
	
	
5. Strong Conn
	
	
	
6. Topology Sort

	
7. Dijkstra


	* 특정 지점부터 다른 지점들까지의 최단 경로와 비용을 계산하는 알고리즘
	* DP 나 그리디 알고리즘의 모습이다.
		- DP   : 최단경로는 짧은 최단경로의 연결로 이뤄진다.
		- 그리디 : 현재 경로에서 가장 인접한 노드를 선택하는 방식.		
	* 방식은 O(N^2) , O(NlogN) 두가지 방식이 존재한다.
	* 음의 가중치는 사용할 수 없다. 
	  다익스트라 알고리즘은 매번 최단 경로를 갱신하면서 진행하는 알고리즘인데 음의 가중치가 존재하면 갱신이 무한하게 발생한다.
	* 특정 노드까지 최단 경로는 배열을 하나 더 사용해서 알아낼 수 있다.
		- 현재 노드가 갱신될 때 path[다음 노드] = 현재 노드 번호 와 같은 방식으로 저장해두고 나중에 역추적해서 경로를 구할 수 있다.
	* 시작 정점 선택, 거리 배열 초기화, 각 정점의 인접한 정점 거리 갱신 의 과정을 반복하며 진행한다.
	
	< 시작 정점 선택 >
	1. 마음대로 선택한다.
	
	< 거리 배열 초기화 >
	1. 기본적으로 가장 큰 값(2^31 - 1)을 하지만 맘에드는 20억정도나 10억정도로 초기화 해도 된다.
	
	< 각 정점의 인접한 정점 거리 갱신 >
	1. O(N^2) 에서는 선형 탐색을 통해 가장 인접한 노드를 찾는다.
	2. O(NlogN) 에서는 우선순위큐를 이용하여 가장 인접한 노드를 뽑아낸다.
	3. 가장 인접한 정점을 찾아냈으면 새로 계산한 값과 현재까지의 최단거리 값을 비교해서 새로 계산한 값이 현재까지의 최단거리보다 작으면 갱신한다.
	
	
	< 1. BOJ 1753번 예제 > https://www.acmicpc.net/problem/1753

	
	/* 이 코드에는 경로도 출력한다 */
	import java.io.*;
	import java.util.*;

	public class Main {

		static BufferedReader br;
		static BufferedWriter bw;
		static StringTokenizer st;

		static class Edge implements Comparable<Edge> {
			int next;
			int cost;

			public Edge(int next, int cost) {
				this.next = next;
				this.cost = cost;
			}

			@Override
			public int compareTo(Edge o) {
				return cost > o.cost ? 1 : cost == o.cost ? 0 : -1;
			}
		}
		// 시작 지점에서 다른 노드까지 가는데 드는 최소 비용 및 경로
		// 0 : cost
		// 1 : previous node
		static int[][] dist = new int[2][20001];

		// 각 정점에서 연결된 지역 리스트
		static ArrayList<Edge>[] adlist = new ArrayList[20001];
		static int V, E;
		static final int INF = Integer.MAX_VALUE;
		static boolean[] check = new boolean[20001];

		public static void main(String args[]) throws Exception {

			br = new BufferedReader(new InputStreamReader(System.in));
			bw = new BufferedWriter(new OutputStreamWriter(System.out));

			st = new StringTokenizer(br.readLine());
			// 정점의 수, 간선의 수
			V = Integer.parseInt(st.nextToken());
			E = Integer.parseInt(st.nextToken());

			// 시작 노드
			int startNode = Integer.parseInt(br.readLine());

			for(int i = 0; i <= V; ++i)
				adlist[i] = new ArrayList<>();

			// 간선 입력(방향 그래프)
			for(int i = 0; i < E; ++i) {
				st = new StringTokenizer(br.readLine());
				// 간선 정보
				int s = Integer.parseInt(st.nextToken());
				int e = Integer.parseInt(st.nextToken());
				int cost = Integer.parseInt(st.nextToken());
				// 간선 정보 저장
				adlist[s].add(new Edge(e, cost));
			}

			// 거리 배열 INF로 초기화
			Arrays.fill(dist[0], INF);

			dijkstra(startNode);

			for(int i = 1; i <= V; ++i)
				bw.write(dist[0][i] == INF ? "INF\n" : dist[0][i] + "\n");
			bw.flush();

			for(int i = 1; i <= V; ++i) {
				Arrays.fill(check, 1, V + 2, false);
				bw.write(i + "번까지의 경로 : ");
				findPath(i);
				bw.write("\n");
				bw.flush();
			}
		}


		// 시작점부터 입력된 node까지의 최단 경로를 역으로 탐색하면서 구한다.
		// 만약 갈 길이 없는 경우(dist == INF) 같은 경우는 다른 문구 출력
		public static void findPath(int node) throws IOException{
			if(dist[0][node] == INF) {
				bw = new BufferedWriter(new OutputStreamWriter(System.out));
				bw.write("can't make path \n");
				return;
			}

			if(!check[node]) {
				check[node] = true;
				findPath(dist[1][node]);
				bw.write(node + " ");
			}
		}


		public static void dijkstra(int start) {

			// 최소 비용 간선 선택을 빠르게
			PriorityQueue<Edge> pq = new PriorityQueue<>();

			// 시작 지점 설정
			dist[0][start] = 0;
			dist[1][start] = start;

			pq.add(new Edge(start, 0));

			while(!pq.isEmpty()) {
				// 선택된 간선
				Edge e = pq.poll();

				// 이전 노드의 도착지점
				int curPos = e.next;
				// 이전 노드에서 지금 노드까지의 비용
				int cost = e.cost;

				// 이전까지 기록했던 최단거리보다
				// 이전 노드에서 현재 노드까지 오는 비용이 더 크면 pass
				if(dist[0][curPos] < cost) continue;

				int len = adlist[curPos].size();

				for(int i = 0; i < len; ++i) {
					// 선택된 노드의 인접 노드
					int next = adlist[curPos].get(i).next;
					// 현재까지의 경로 비용 + 현재 위치 -> 다음 위치까지 가는 경로의 비용
					int nextDistance = cost + adlist[curPos].get(i).cost;
					// 이전까지의 비용과 현재 갱신된 비용을 비교
					if(nextDistance < dist[0][next]) {
						// 갱신된 값이 더 작다면 갱신
						dist[0][next] = nextDistance;
						// 경로도 갱신
						dist[1][next] = curPos;
						pq.add(new Edge(next, nextDistance));
					}
				}
			}
		}
	}

	다른 입력 
	6 20
	1
	1 2 2
	1 3 5
	1 4 1
	2 1 2
	2 3 3
	2 4 2
	3 1 5
	3 2 3
	3 4 3
	3 5 1
	3 6 5
	4 1 1
	4 2 2
	4 3 3
	4 5 1
	5 3 1
	5 4 1
	5 6 2
	6 3 5
	6 5 2
	

8. BellmanFord



9. Floyd - Warshall


