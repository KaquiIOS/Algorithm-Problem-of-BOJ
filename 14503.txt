로봇 청소기 성공 

문제
로봇 청소기가 주어졌을 때, 청소하는 영역의 개수를 구하는 프로그램을 작성하시오.

로봇 청소기가 있는 장소는 N×M 크기의 직사각형으로 나타낼 수 있으며, 1×1크기의 정사각형 칸으로 나누어져 있다. 
각각의 칸은 벽 또는 빈 칸이다. 
청소기는 바라보는 방향이 있으며, 이 방향은 동, 서, 남, 북중 하나이다. 
지도의 각 칸은 (r, c)로 나타낼 수 있고, r은 북쪽으로부터 떨어진 칸의 개수, c는 서쪽으로 부터 떨어진 칸의 개수이다.

로봇 청소기는 다음과 같이 작동한다.

현재 위치를 청소한다.
현재 위치에서 현재 방향을 기준으로 왼쪽방향부터 차례대로 탐색을 진행한다.
왼쪽 방향에 아직 청소하지 않은 공간이 존재한다면, 그 방향으로 회전한 다음 한 칸을 전진하고 1번부터 진행한다.
왼쪽 방향에 청소할 공간이 없다면, 그 방향으로 회전하고 2번으로 돌아간다.
네 방향 모두 청소가 이미 되어있거나 벽인 경우에는, 바라보는 방향을 유지한 채로 한 칸 후진을 하고 2번으로 돌아간다.
네 방향 모두 청소가 이미 되어있거나 벽이면서, 뒤쪽 방향이 벽이라 후진도 할 수 없는 경우에는 작동을 멈춘다.
로봇 청소기는 이미 청소되어있는 칸을 또 청소하지 않으며, 벽을 통과할 수 없다.

입력
첫째 줄에 세로 크기 N과 가로 크기 M이 주어진다. (3 ≤ N, M ≤ 50)

둘째 줄에 로봇 청소기가 있는 칸의 좌표 (r, c)와 바라보는 방향 d가 주어진다. 
d가 0인 경우에는 북쪽을, 1인 경우에는 동쪽을, 2인 경우에는 남쪽을, 3인 경우에는 서쪽을 바라보고 있는 것이다.

셋째 줄부터 N개의 줄에 장소의 상태가 북쪽부터 남쪽 순서대로, 각 줄은 서쪽부터 동쪽 순서대로 주어진다. 
빈 칸은 0, 벽은 1로 주어진다. 장소의 모든 외곽은 벽이다.

로봇 청소기가 있는 칸의 상태는 항상 빈 칸이다.

출력
로봇 청소기가 청소하는 칸의 개수를 출력한다.

예제 입력 1  복사
3 3
1 1 0
1 1 1
1 0 1
1 1 1
예제 출력 1  복사
1
예제 입력 2  복사
11 10
7 4 0
1 1 1 1 1 1 1 1 1 1
1 0 0 0 0 0 0 0 0 1
1 0 0 0 1 1 1 1 0 1
1 0 0 1 1 0 0 0 0 1
1 0 1 1 0 0 0 0 0 1
1 0 0 0 0 0 0 0 0 1
1 0 0 0 0 0 0 1 0 1
1 0 0 0 0 0 1 1 0 1
1 0 0 0 0 0 1 1 0 1
1 0 0 0 0 0 0 0 0 1
1 1 1 1 1 1 1 1 1 1
예제 출력 2  복사
57


PS:
	* 예쁘게 코딩한다고 고생한 문제..
	
	* 0 : 방문을 하지않음.
	  1 : 벽
	  2 : 방문한 지역
	
	* 문제에서 동서남북의 순서를 살짝 바꿔줄 필요가 있음
		- 문제에서 입력 
			0 - 북, 1 - 동, 2 - 남, 3 - 서
			
		- 실제 왼쪽으로 돌아갈 때 순서
			0 - 북, 1 - 서, 2 - 남, 3 - 동
			
		=> 맨 처음에 입력이 들어올 때 서쪽이면 동쪽으로, 동쪽이면 서쪽으로만 변경해주면 된다.
		
	* 다음 방향은 (현재 방향 + 1 % 4) 를 해서 계산한다. 그리고 현재 방향의 왼쪽이 방문했는지 안했는지 확인한다. (좌표에 각 값 더해주기)
		EX) 현재 좌표, 방향 (1,2,0)
			북(0) -> (0 + 1) % 4 = 서(1)
			다음 좌표의 위치 및 방향은 (1,3,1)
			
		EX) 현재 좌표, 방향 (1,2,3)
		    동(3) -> (3 + 1) % 4 = 북(0)
			다음 좌표의 위치 및 방향은 (0,2,0)
			
		과 같은 방식으로 다음 좌표를 리턴해준다.
		
	* 만약 네 방향 다 방문한 경우라면 NULL 을 리턴한다.
	
	* 새로운 좌표를 받았을 때 그 값이
		- NULL : 후진을 할 수 있는지 확인하고 갈 수 있으면 후진한다. 후진하지 못하면 함수 종료
		- NOT NULL : 해당 좌표로 이동한다. 이동할 때 이동한 블럭을 하나 증가시켜준다.
		
	* 위의 과정을 반복하면 방문할 수 있는 모든 지역을 방문한다.
	
	
			
	
import java.io.*;
import java.util.*;

public class Main {

    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    static int N, M;

    static Queue<Point> q = new ArrayDeque<>();

    static final int NORTH = 0, WEST = 1, SOUTH = 2, EAST = 3, VISIT = 2;

    //  북 서 남 동
    static int[] dx = {-1, 0, 1, 0}, dy = {0, -1, 0, 1};
    static int[][] map = new int[50][50];

    static class Point {
        int x;
        int y;
        int dir;

        public Point(int _x, int _y, int _dir) {
            x = _x;
            y = _y;
            dir = _dir;
        }
    }

    public static void main(String args[]) throws Exception {

        br = new BufferedReader(new InputStreamReader(System.in));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        st = new StringTokenizer(br.readLine());

        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());

        st = new StringTokenizer(br.readLine());

        Point s = new Point(Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()));

        // 입력 순서 바꾸기
        s.dir = (s.dir == WEST) ? EAST : (s.dir == EAST) ? WEST : s.dir;

        for (int i = 0; i < N; ++i) {
            st = new StringTokenizer(br.readLine());
            for (int j = 0; j < M; ++j) {
                map[i][j] = Integer.parseInt(st.nextToken());
            }
        }

		// 맨 처음 위치 방문
        map[s.x][s.y] = VISIT;
        int ans = DFS(s) + 1;

        bw.write(ans + "\n");
        bw.flush();
    }

    public static int DFS(Point p) {

		// 다음 위치 받아오기
        Point next = nextPos(p);

		// 갈 수 없는 경우
        if (next == null) {
			// 후진은 가능한 경우 후진
            if (map[p.x - dx[p.dir]][p.y - dy[p.dir]] == VISIT) {
                return DFS(new Point(p.x - dx[p.dir], p.y - dy[p.dir], p.dir));
            }
			// 후진 불가능이면 종료
            return 0;
        } else {
			// 다음 위치 방문 표시
            map[next.x][next.y] = VISIT;
			// 청소한 블럭 + 1 해주고 다음 위치로 ㄱ_ㄱ
            return DFS(next) + 1;
        }
    }

	// 다음 위치 찾기
    public static Point nextPos(Point p) {
		// 북서남동 4번만 돌면 된다.
        int t = 0;
		// 다음 방향 계싼
        int i = (p.dir + 1) % 4;
        for (; t < 4; i = (i + 1) % 4, t++) {
            if (map[p.x + dx[i]][p.y + dy[i]] == 0)
                return new Point(p.x + dx[i], p.y + dy[i], i);
        }
        return null;
    }
}	
	
