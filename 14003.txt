가장 긴 증가하는 부분 수열 5 성공 스페셜 저지 

문제
수열 A가 주어졌을 때, 가장 긴 증가하는 부분 수열을 구하는 프로그램을 작성하시오.

예를 들어, 수열 A = {10, 20, 10, 30, 20, 50} 인 경우에 가장 긴 증가하는 부분 수열은 A = {10, 20, 10, 30, 20, 50} 이고, 길이는 4이다.

입력
첫째 줄에 수열 A의 크기 N (1 ≤ N ≤ 1,000,000)이 주어진다.

둘째 줄에는 수열 A를 이루고 있는 Ai가 주어진다. (-1,000,000,000 ≤ Ai ≤ 1,000,000,000)

출력
첫째 줄에 수열 A의 가장 긴 증가하는 부분 수열의 길이를 출력한다.

둘째 줄에는 정답이 될 수 있는 가장 긴 증가하는 부분 수열을 출력한다.

예제 입력 1  복사
6
10 20 10 30 20 50
예제 출력 1  복사
4
10 20 30 50


import java.io.*;
import java.util.*;

public class Main {

    final static int NOT_VISIT = -1;
    static int[] dp, cost, distance;
    static int N, len = 0;

    public static void main(String args[]) throws Exception {

        FastScanner fs = new FastScanner();

        N = fs.nextInt();

        dp = new int[N];
        cost = new int[N];
        distance = new int[N];

        for (int i = 0; i < N; ++i)
            cost[i] = fs.nextInt();

        dp[0] = cost[0];
        distance[0] = 0;

        for (int i = 1; i < N; ++i) {

            if (dp[len] < cost[i]) {
                dp[++len] = cost[i];
                distance[i] = len;
            } else if(dp[len] > cost[i]){
                int p = lower_bound(0, len, cost[i]);
                distance[i] = p;
                dp[p] = cost[i];
            }
        }

        System.out.println(len + 1);

        getPath(N-1, len);
    }

    public static void getPath(int n, int target) {

        if (n == -1) return;
        else if (distance[n] != target) getPath(n - 1, target);
        else {
            getPath(n - 1, target - 1);
            System.out.print(cost[n] + " ");
        }
    }

    public static int lower_bound(int left, int right, int data) {

        int mid = (left + right) / 2;

        if (dp[mid] == data) return mid;
        if (left == right) return left;
        return (dp[mid] < data) ? lower_bound(mid + 1, right, data) : lower_bound(left, mid, data);
    }
}

class FastScanner {

    private BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    private StringTokenizer st;

    public int nextInt() throws Exception {
        if (st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());
        return Integer.parseInt(st.nextToken());
    }

    public long nextLong() throws Exception {
        if (st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());
        return Long.parseLong(st.nextToken());
    }

    public String nextLine() throws Exception {
        if (st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());
        return st.nextToken();
    }
}
