가장 큰 정사각형 성공 

문제
n×m의 0, 1로 된 배열이 있다. 이 배열에서 1로 된 가장 큰 정사각형의 크기를 구하는 프로그램을 작성하시오.

0	1	0	0
0	1	1	1
1	1	1	0
0	0	1	0
위와 같은 예제에서는 가운데의 2×2 배열이 가장 큰 정사각형이다. 

입력
첫째 줄에 n, m(1 ≤ n, m ≤ 1,000)이 주어진다. 다음 n개의 줄에는 m개의 숫자로 배열이 주어진다.

출력
첫째 줄에 가장 큰 정사각형의 넓이를 출력한다.

예제 입력 1  복사
4 4
0100
0111
1110
0010
예제 출력 1  복사
4

PS:
	* 메모이제이션을 통해 (I,J) 위치에서 정사각형이 가질 수 있는 가장 긴 한변의 길이를 저장한다.
	* 반복문을 통해 (I,J) 위치에서 정사각형이 가질 수 있는 가장 긴 한변의 길이를 구한다.
	* 이 문제는 DP를 계산이 편한 방향으로 생각할 필요가 있었다. 처음에 'DP[N][M] = 정사각형이 가질 수 있는 가장 긴 둘레' 라고 생각하고 문제를 풀었을 때는 계산이 복잡했다.
	
점화식:
	DP[N][M] = Math.min(DP[N+1][M], DP[N][M+1], DP[N+1][M+1]) + DP[N][M]
	
	
import java.io.*;
import java.util.*;

public class Main {
    static int[][] dp;
    static int N, M;

    public static void main(String args[]) throws Exception {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        StringTokenizer st = new StringTokenizer(br.readLine());

        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());

        dp = new int[N][M];

        int ans = 0;

        for(int i = 0; i < N; ++i) {
            String row = br.readLine();
            for(int j = 0; j < M; ++j)
                dp[i][j] = row.charAt(j) - '0';
            ans = ans > dp[i][M-1] ? ans : dp[i][M-1];
        }


        if(ans == 0)
            for(int i = 0; i < M; ++i)
                ans = ans > dp[N-1][i] ? ans : dp[N-1][i];

        for(int i = N - 2; i >= 0; --i) {
            for(int j = M - 2; j >= 0; --j) {
                if(dp[i][j] == 0) continue;
                dp[i][j] = Math.min(dp[i+1][j], Math.min(dp[i][j+1], dp[i+1][j+1])) + 1;
                ans = ans > dp[i][j] ? ans : dp[i][j];
            }
        }

        bw.write((ans * ans)+ "\n");
        bw.flush();
    }
}